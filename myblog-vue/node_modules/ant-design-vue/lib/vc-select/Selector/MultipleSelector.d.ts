import type { LabelValueType, RawValueType, CustomTagProps } from '../interface/generator';
import type { RenderNode } from '../interface';
import type { InnerSelectorProps } from '.';
import type { VNodeChild } from 'vue';
interface SelectorProps extends InnerSelectorProps {
    removeIcon?: RenderNode;
    maxTagCount?: number | 'responsive';
    maxTagTextLength?: number;
    maxTagPlaceholder?: VNodeChild;
    tokenSeparators?: string[];
    tagRender?: (props: CustomTagProps) => VNodeChild;
    onToggleOpen: (open?: boolean) => void;
    choiceTransitionName?: string;
    onSelect: (value: RawValueType, option: {
        selected: boolean;
    }) => void;
}
declare const SelectSelector: import("vue").DefineComponent<SelectorProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    removeIcon?: unknown;
    maxTagCount?: unknown;
    maxTagTextLength?: unknown;
    maxTagPlaceholder?: unknown;
    tokenSeparators?: unknown;
    tagRender?: unknown;
    onToggleOpen?: unknown;
    choiceTransitionName?: unknown;
    onSelect?: unknown;
    prefixCls?: unknown;
    id?: unknown;
    mode?: unknown;
    inputRef?: unknown;
    placeholder?: unknown;
    disabled?: unknown;
    autofocus?: unknown;
    autocomplete?: unknown;
    values?: unknown;
    showSearch?: unknown;
    searchValue?: unknown;
    accessibilityIndex?: unknown;
    open?: unknown;
    tabindex?: unknown;
    onInputKeyDown?: unknown;
    onInputMouseDown?: unknown;
    onInputChange?: unknown;
    onInputPaste?: unknown;
    onInputCompositionStart?: unknown;
    onInputCompositionEnd?: unknown;
} & {} & {
    values?: LabelValueType[];
    prefixCls?: string;
    onSelect?: (value: RawValueType, option: {
        selected: boolean;
    }) => void;
    tabindex?: string | number;
    open?: boolean;
    disabled?: boolean;
    mode?: import("../interface").Mode;
    id?: string;
    searchValue?: string;
    onToggleOpen?: void;
    autofocus?: boolean;
    autocomplete?: string;
    accessibilityIndex?: number;
    inputRef?: import("../../_util/createRef").RefObject;
    removeIcon?: RenderNode;
    maxTagCount?: number | "responsive";
    maxTagTextLength?: number;
    maxTagPlaceholder?: VNodeChild;
    tokenSeparators?: string[];
    tagRender?: (props: CustomTagProps) => VNodeChild;
    choiceTransitionName?: string;
    placeholder?: VNodeChild;
    showSearch?: boolean;
    onInputKeyDown?: EventHandlerNonNull;
    onInputMouseDown?: EventHandlerNonNull;
    onInputChange?: EventHandlerNonNull;
    onInputPaste?: EventHandlerNonNull;
    onInputCompositionStart?: EventHandlerNonNull;
    onInputCompositionEnd?: EventHandlerNonNull;
}>, {}>;
export default SelectSelector;
