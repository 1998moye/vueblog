{"remainingRequest":"D:\\IdeaWorkSpace\\springBootDemo2\\myblog-vue2\\node_modules\\babel-loader\\lib\\index.js!D:\\IdeaWorkSpace\\springBootDemo2\\myblog-vue2\\node_modules\\vuetify\\lib\\util\\color\\transformSRGB.mjs","dependencies":[{"path":"D:\\IdeaWorkSpace\\springBootDemo2\\myblog-vue2\\node_modules\\vuetify\\lib\\util\\color\\transformSRGB.mjs","mtime":499162500000},{"path":"D:\\IdeaWorkSpace\\springBootDemo2\\myblog-vue2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IdeaWorkSpace\\springBootDemo2\\myblog-vue2\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY2xhbXAgfSBmcm9tICIuLi8uLi91dGlsL2hlbHBlcnMubWpzIjsgLy8gRm9yIGNvbnZlcnRpbmcgWFlaIHRvIHNSR0IKCnZhciBzcmdiRm9yd2FyZE1hdHJpeCA9IFtbMy4yNDA2LCAtMS41MzcyLCAtMC40OTg2XSwgWy0wLjk2ODksIDEuODc1OCwgMC4wNDE1XSwgWzAuMDU1NywgLTAuMjA0MCwgMS4wNTcwXV07IC8vIEZvcndhcmQgZ2FtbWEgYWRqdXN0Cgp2YXIgc3JnYkZvcndhcmRUcmFuc2Zvcm0gPSBmdW5jdGlvbiBzcmdiRm9yd2FyZFRyYW5zZm9ybShDKSB7CiAgcmV0dXJuIEMgPD0gMC4wMDMxMzA4ID8gQyAqIDEyLjkyIDogMS4wNTUgKiBNYXRoLnBvdyhDLCAxIC8gMi40KSAtIDAuMDU1Owp9OyAvLyBGb3IgY29udmVydGluZyBzUkdCIHRvIFhZWgoKCnZhciBzcmdiUmV2ZXJzZU1hdHJpeCA9IFtbMC40MTI0LCAwLjM1NzYsIDAuMTgwNV0sIFswLjIxMjYsIDAuNzE1MiwgMC4wNzIyXSwgWzAuMDE5MywgMC4xMTkyLCAwLjk1MDVdXTsgLy8gUmV2ZXJzZSBnYW1tYSBhZGp1c3QKCnZhciBzcmdiUmV2ZXJzZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIHNyZ2JSZXZlcnNlVHJhbnNmb3JtKEMpIHsKICByZXR1cm4gQyA8PSAwLjA0MDQ1ID8gQyAvIDEyLjkyIDogTWF0aC5wb3coKEMgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTsKfTsKCmV4cG9ydCBmdW5jdGlvbiBmcm9tWFlaKHh5eikgewogIHZhciByZ2IgPSBBcnJheSgzKTsKICB2YXIgdHJhbnNmb3JtID0gc3JnYkZvcndhcmRUcmFuc2Zvcm07CiAgdmFyIG1hdHJpeCA9IHNyZ2JGb3J3YXJkTWF0cml4OyAvLyBNYXRyaXggdHJhbnNmb3JtLCB0aGVuIGdhbW1hIGFkanVzdG1lbnQKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyArK2kpIHsKICAgIHJnYltpXSA9IE1hdGgucm91bmQoY2xhbXAodHJhbnNmb3JtKG1hdHJpeFtpXVswXSAqIHh5elswXSArIG1hdHJpeFtpXVsxXSAqIHh5elsxXSArIG1hdHJpeFtpXVsyXSAqIHh5elsyXSkpICogMjU1KTsKICB9IC8vIFJlc2NhbGUgYmFjayB0byBbMCwgMjU1XQoKCiAgcmV0dXJuIChyZ2JbMF0gPDwgMTYpICsgKHJnYlsxXSA8PCA4KSArIChyZ2JbMl0gPDwgMCk7Cn0KZXhwb3J0IGZ1bmN0aW9uIHRvWFlaKHJnYikgewogIHZhciB4eXogPSBbMCwgMCwgMF07CiAgdmFyIHRyYW5zZm9ybSA9IHNyZ2JSZXZlcnNlVHJhbnNmb3JtOwogIHZhciBtYXRyaXggPSBzcmdiUmV2ZXJzZU1hdHJpeDsgLy8gUmVzY2FsZSBmcm9tIFswLCAyNTVdIHRvIFswLCAxXSB0aGVuIGFkanVzdCBzUkdCIGdhbW1hIHRvIGxpbmVhciBSR0IKCiAgdmFyIHIgPSB0cmFuc2Zvcm0oKHJnYiA+PiAxNiAmIDB4ZmYpIC8gMjU1KTsKICB2YXIgZyA9IHRyYW5zZm9ybSgocmdiID4+IDggJiAweGZmKSAvIDI1NSk7CiAgdmFyIGIgPSB0cmFuc2Zvcm0oKHJnYiA+PiAwICYgMHhmZikgLyAyNTUpOyAvLyBNYXRyaXggY29sb3Igc3BhY2UgdHJhbnNmb3JtCgogIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgKytpKSB7CiAgICB4eXpbaV0gPSBtYXRyaXhbaV1bMF0gKiByICsgbWF0cml4W2ldWzFdICogZyArIG1hdHJpeFtpXVsyXSAqIGI7CiAgfQoKICByZXR1cm4geHl6Owp9"},{"version":3,"sources":["../../../src/util/color/transformSRGB.ts"],"names":["clamp","srgbForwardMatrix","srgbForwardTransform","C","srgbReverseMatrix","srgbReverseTransform","rgb","Array","transform","matrix","i","Math","xyz","r","g","b"],"mappings":"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","sourcesContent":["import type { ColorInt, XYZ } from '../colorUtils'\nimport { clamp } from '../../util/helpers'\n\n// For converting XYZ to sRGB\nconst srgbForwardMatrix = [\n  [3.2406, -1.5372, -0.4986],\n  [-0.9689, 1.8758, 0.0415],\n  [0.0557, -0.2040, 1.0570],\n]\n\n// Forward gamma adjust\nconst srgbForwardTransform = (C: number): number => (\n  C <= 0.0031308\n    ? C * 12.92\n    : 1.055 * C ** (1 / 2.4) - 0.055\n)\n\n// For converting sRGB to XYZ\nconst srgbReverseMatrix = [\n  [0.4124, 0.3576, 0.1805],\n  [0.2126, 0.7152, 0.0722],\n  [0.0193, 0.1192, 0.9505],\n]\n\n// Reverse gamma adjust\nconst srgbReverseTransform = (C: number): number => (\n  C <= 0.04045\n    ? C / 12.92\n    : ((C + 0.055) / 1.055) ** 2.4\n)\n\nexport function fromXYZ (xyz: XYZ): ColorInt {\n  const rgb = Array(3)\n  const transform = srgbForwardTransform\n  const matrix = srgbForwardMatrix\n\n  // Matrix transform, then gamma adjustment\n  for (let i = 0; i < 3; ++i) {\n    rgb[i] = Math.round(clamp(transform(\n      matrix[i][0] * xyz[0] +\n      matrix[i][1] * xyz[1] +\n      matrix[i][2] * xyz[2]\n    )) * 255)\n  }\n\n  // Rescale back to [0, 255]\n  return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0)\n}\n\nexport function toXYZ (rgb: ColorInt): XYZ {\n  const xyz: XYZ = [0, 0, 0]\n  const transform = srgbReverseTransform\n  const matrix = srgbReverseMatrix\n\n  // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n  const r = transform((rgb >> 16 & 0xff) / 255)\n  const g = transform((rgb >> 8 & 0xff) / 255)\n  const b = transform((rgb >> 0 & 0xff) / 255)\n\n  // Matrix color space transform\n  for (let i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b\n  }\n\n  return xyz\n}\n"]}]}