{"remainingRequest":"D:\\IdeaWorkSpace\\springBootDemo2\\myblog-vue2\\node_modules\\babel-loader\\lib\\index.js!D:\\IdeaWorkSpace\\springBootDemo2\\myblog-vue2\\node_modules\\vuetify\\lib\\util\\color\\APCA.mjs","dependencies":[{"path":"D:\\IdeaWorkSpace\\springBootDemo2\\myblog-vue2\\node_modules\\vuetify\\lib\\util\\color\\APCA.mjs","mtime":499162500000},{"path":"D:\\IdeaWorkSpace\\springBootDemo2\\myblog-vue2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IdeaWorkSpace\\springBootDemo2\\myblog-vue2\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIFdDQUcgMy4wIEFQQ0EgcGVyY2VwdHVhbCBjb250cmFzdCBhbGdvcml0aG0gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vTXluZGV4L1NBUEMtQVBDQQogKiBAbGljZW5jZSBodHRwczovL3d3dy53My5vcmcvQ29uc29ydGl1bS9MZWdhbC8yMDE1L2NvcHlyaWdodC1zb2Z0d2FyZS1hbmQtZG9jdW1lbnQKICogQHNlZSBodHRwczovL3d3dy53My5vcmcvV0FJL0dML3Rhc2stZm9yY2VzL3NpbHZlci93aWtpL1Zpc3VhbF9Db250cmFzdF9vZl9UZXh0X1N1Ymdyb3VwCiAqLwovLyBNQUdJQ0FMIE5VTUJFUlMKLy8gc1JHQiBDb252ZXJzaW9uIHRvIFJlbGF0aXZlIEx1bWluYW5jZSAoWSkKLy8gVHJhbnNmZXIgQ3VydmUgKGFrYSAiR2FtbWEiKSBmb3Igc1JHQiBsaW5lYXJpemF0aW9uCi8vIFNpbXBsZSBwb3dlciBjdXJ2ZSB2cyBwaWVjZXdpc2UgZGVzY3JpYmVkIGluIGRvY3MKLy8gRXNzZW50aWFsbHksIDIuNCBiZXN0IG1vZGVscyBhY3R1YWwgZGlzcGxheQovLyBjaGFyYWN0ZXJpc3RpY3MgaW4gY29tYmluYXRpb24gd2l0aCB0aGUgdG90YWwgbWV0aG9kCnZhciBtYWluVFJDID0gMi40Owp2YXIgUmNvID0gMC4yMTI2NzI5OyAvLyBzUkdCIFJlZCBDb2VmZmljaWVudCAoZnJvbSBtYXRyaXgpCgp2YXIgR2NvID0gMC43MTUxNTIyOyAvLyBzUkdCIEdyZWVuIENvZWZmaWNpZW50IChmcm9tIG1hdHJpeCkKCnZhciBCY28gPSAwLjA3MjE3NTA7IC8vIHNSR0IgQmx1ZSBDb2VmZmljaWVudCAoZnJvbSBtYXRyaXgpCi8vIEZvciBGaW5kaW5nIFJhdyBTQVBDIENvbnRyYXN0IGZyb20gUmVsYXRpdmUgTHVtaW5hbmNlIChZKQovLyBDb25zdGFudHMgZm9yIFNBUEMgUG93ZXIgQ3VydmUgRXhwb25lbnRzCi8vIE9uZSBwYWlyIGZvciBub3JtYWwgdGV4dCwgYW5kIG9uZSBmb3IgcmV2ZXJzZQovLyBUaGVzZSBhcmUgdGhlICJiZWF0aW5nIGhlYXJ0IiBvZiBTQVBDCgp2YXIgbm9ybUJHID0gMC41NTsKdmFyIG5vcm1UWFQgPSAwLjU4Owp2YXIgcmV2VFhUID0gMC41NzsKdmFyIHJldkJHID0gMC42MjsgLy8gRm9yIENsYW1waW5nIGFuZCBTY2FsaW5nIFZhbHVlcwoKdmFyIGJsa1RocnMgPSAwLjAzOyAvLyBMZXZlbCB0aGF0IHRyaWdnZXJzIHRoZSBzb2Z0IGJsYWNrIGNsYW1wCgp2YXIgYmxrQ2xtcCA9IDEuNDU7IC8vIEV4cG9uZW50IGZvciB0aGUgc29mdCBibGFjayBjbGFtcCBjdXJ2ZQoKdmFyIGRlbHRhWW1pbiA9IDAuMDAwNTsgLy8gTGludCB0cmFwCgp2YXIgc2NhbGVCb1cgPSAxLjI1OyAvLyBTY2FsaW5nIGZvciBkYXJrIHRleHQgb24gbGlnaHQKCnZhciBzY2FsZVdvQiA9IDEuMjU7IC8vIFNjYWxpbmcgZm9yIGxpZ2h0IHRleHQgb24gZGFyawoKdmFyIGxvQ29uVGhyZXNoID0gMC4wNzg7IC8vIFRocmVzaG9sZCBmb3IgbmV3IHNpbXBsZSBvZmZzZXQgc2NhbGUKCnZhciBsb0NvbkZhY3RvciA9IDEyLjgyMDUxMjgyMDUxMjgyOyAvLyA9IDEvMC4wNzgsCgp2YXIgbG9Db25PZmZzZXQgPSAwLjA2OyAvLyBUaGUgc2ltcGxlIG9mZnNldAoKdmFyIGxvQ2xpcCA9IDAuMDAxOyAvLyBPdXRwdXQgY2xpcCAobGludCB0cmFwICMyKQoKZXhwb3J0IGZ1bmN0aW9uIEFQQ0Fjb250cmFzdCh0ZXh0LCBiYWNrZ3JvdW5kKSB7CiAgLy8gTGluZWFyaXplIHNSR0IKICB2YXIgUnR4dCA9IE1hdGgucG93KCh0ZXh0ID4+IDE2ICYgMHhmZikgLyAyNTUsIG1haW5UUkMpOwogIHZhciBHdHh0ID0gTWF0aC5wb3coKHRleHQgPj4gOCAmIDB4ZmYpIC8gMjU1LCBtYWluVFJDKTsKICB2YXIgQnR4dCA9IE1hdGgucG93KCh0ZXh0ID4+IDAgJiAweGZmKSAvIDI1NSwgbWFpblRSQyk7CiAgdmFyIFJiZyA9IE1hdGgucG93KChiYWNrZ3JvdW5kID4+IDE2ICYgMHhmZikgLyAyNTUsIG1haW5UUkMpOwogIHZhciBHYmcgPSBNYXRoLnBvdygoYmFja2dyb3VuZCA+PiA4ICYgMHhmZikgLyAyNTUsIG1haW5UUkMpOwogIHZhciBCYmcgPSBNYXRoLnBvdygoYmFja2dyb3VuZCA+PiAwICYgMHhmZikgLyAyNTUsIG1haW5UUkMpOyAvLyBBcHBseSB0aGUgc3RhbmRhcmQgY29lZmZpY2llbnRzIGFuZCBzdW0gdG8gWQoKICB2YXIgWXR4dCA9IFJ0eHQgKiBSY28gKyBHdHh0ICogR2NvICsgQnR4dCAqIEJjbzsKICB2YXIgWWJnID0gUmJnICogUmNvICsgR2JnICogR2NvICsgQmJnICogQmNvOyAvLyBTb2Z0IGNsYW1wIFkgd2hlbiBuZWFyIGJsYWNrLgogIC8vIE5vdyBjbGFtcGluZyBhbGwgY29sb3JzIHRvIHByZXZlbnQgY3Jvc3NvdmVyIGVycm9ycwoKICBpZiAoWXR4dCA8PSBibGtUaHJzKSBZdHh0ICs9IE1hdGgucG93KGJsa1RocnMgLSBZdHh0LCBibGtDbG1wKTsKICBpZiAoWWJnIDw9IGJsa1RocnMpIFliZyArPSBNYXRoLnBvdyhibGtUaHJzIC0gWWJnLCBibGtDbG1wKTsgLy8gUmV0dXJuIDAgRWFybHkgZm9yIGV4dHJlbWVseSBsb3cg4oiGWSAobGludCB0cmFwICMxKQoKICBpZiAoTWF0aC5hYnMoWWJnIC0gWXR4dCkgPCBkZWx0YVltaW4pIHJldHVybiAwLjA7IC8vIFNBUEMgQ09OVFJBU1QKCiAgdmFyIG91dHB1dENvbnRyYXN0OyAvLyBGb3Igd2VpZ2h0ZWQgZmluYWwgdmFsdWVzCgogIGlmIChZYmcgPiBZdHh0KSB7CiAgICAvLyBGb3Igbm9ybWFsIHBvbGFyaXR5LCBibGFjayB0ZXh0IG9uIHdoaXRlCiAgICAvLyBDYWxjdWxhdGUgdGhlIFNBUEMgY29udHJhc3QgdmFsdWUgYW5kIHNjYWxlCiAgICB2YXIgU0FQQyA9IChNYXRoLnBvdyhZYmcsIG5vcm1CRykgLSBNYXRoLnBvdyhZdHh0LCBub3JtVFhUKSkgKiBzY2FsZUJvVzsgLy8gTkVXISBTQVBDIFNtb290aFNjYWxl4oSiCiAgICAvLyBMb3cgQ29udHJhc3QgU21vb3RoIFNjYWxlIFJvbGxvdXQgdG8gcHJldmVudCBwb2xhcml0eSByZXZlcnNhbAogICAgLy8gYW5kIGFsc28gYSBsb3cgY2xpcCBmb3IgdmVyeSBsb3cgY29udHJhc3RzIChsaW50IHRyYXAgIzIpCiAgICAvLyBtdWNoIG9mIHRoaXMgaXMgZm9yIHZlcnkgbG93IGNvbnRyYXN0cywgbGVzcyB0aGFuIDEwCiAgICAvLyB0aGVyZWZvcmUgZm9yIG1vc3QgcmV2ZXJzaW5nIG5lZWRzLCBvbmx5IGxvQ29uT2Zmc2V0IGlzIGltcG9ydGFudAoKICAgIG91dHB1dENvbnRyYXN0ID0gU0FQQyA8IGxvQ2xpcCA/IDAuMCA6IFNBUEMgPCBsb0NvblRocmVzaCA/IFNBUEMgLSBTQVBDICogbG9Db25GYWN0b3IgKiBsb0Nvbk9mZnNldCA6IFNBUEMgLSBsb0Nvbk9mZnNldDsKICB9IGVsc2UgewogICAgLy8gRm9yIHJldmVyc2UgcG9sYXJpdHksIGxpZ2h0IHRleHQgb24gZGFyawogICAgLy8gV29CIHNob3VsZCBhbHdheXMgcmV0dXJuIG5lZ2F0aXZlIHZhbHVlLgogICAgdmFyIF9TQVBDID0gKE1hdGgucG93KFliZywgcmV2QkcpIC0gTWF0aC5wb3coWXR4dCwgcmV2VFhUKSkgKiBzY2FsZVdvQjsKCiAgICBvdXRwdXRDb250cmFzdCA9IF9TQVBDID4gLWxvQ2xpcCA/IDAuMCA6IF9TQVBDID4gLWxvQ29uVGhyZXNoID8gX1NBUEMgLSBfU0FQQyAqIGxvQ29uRmFjdG9yICogbG9Db25PZmZzZXQgOiBfU0FQQyArIGxvQ29uT2Zmc2V0OwogIH0KCiAgcmV0dXJuIG91dHB1dENvbnRyYXN0ICogMTAwOwp9"},{"version":3,"sources":["../../../src/util/color/APCA.ts"],"names":["mainTRC","Rco","Gco","Bco","normBG","normTXT","revTXT","revBG","blkThrs","blkClmp","deltaYmin","scaleBoW","scaleWoB","loConThresh","loConFactor","loConOffset","loClip","Rtxt","text","Gtxt","Btxt","Rbg","background","Gbg","Bbg","Ytxt","Ybg","Math","SAPC","outputContrast"],"mappings":"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","sourcesContent":["/**\n * WCAG 3.0 APCA perceptual contrast algorithm from https://github.com/Myndex/SAPC-APCA\n * @licence https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n * @see https://www.w3.org/WAI/GL/task-forces/silver/wiki/Visual_Contrast_of_Text_Subgroup\n */\n\n// MAGICAL NUMBERS\n\n// sRGB Conversion to Relative Luminance (Y)\n\n// Transfer Curve (aka \"Gamma\") for sRGB linearization\n// Simple power curve vs piecewise described in docs\n// Essentially, 2.4 best models actual display\n// characteristics in combination with the total method\nconst mainTRC = 2.4\n\nconst Rco = 0.2126729 // sRGB Red Coefficient (from matrix)\nconst Gco = 0.7151522 // sRGB Green Coefficient (from matrix)\nconst Bco = 0.0721750 // sRGB Blue Coefficient (from matrix)\n\n// For Finding Raw SAPC Contrast from Relative Luminance (Y)\n\n// Constants for SAPC Power Curve Exponents\n// One pair for normal text, and one for reverse\n// These are the \"beating heart\" of SAPC\nconst normBG = 0.55\nconst normTXT = 0.58\nconst revTXT = 0.57\nconst revBG = 0.62\n\n// For Clamping and Scaling Values\n\nconst blkThrs = 0.03 // Level that triggers the soft black clamp\nconst blkClmp = 1.45 // Exponent for the soft black clamp curve\nconst deltaYmin = 0.0005 // Lint trap\nconst scaleBoW = 1.25 // Scaling for dark text on light\nconst scaleWoB = 1.25 // Scaling for light text on dark\nconst loConThresh = 0.078 // Threshold for new simple offset scale\nconst loConFactor = 12.82051282051282 // = 1/0.078,\nconst loConOffset = 0.06 // The simple offset\nconst loClip = 0.001 // Output clip (lint trap #2)\n\nexport function APCAcontrast (text: number, background: number) {\n  // Linearize sRGB\n  const Rtxt = ((text >> 16 & 0xff) / 255) ** mainTRC\n  const Gtxt = ((text >> 8 & 0xff) / 255) ** mainTRC\n  const Btxt = ((text >> 0 & 0xff) / 255) ** mainTRC\n\n  const Rbg = ((background >> 16 & 0xff) / 255) ** mainTRC\n  const Gbg = ((background >> 8 & 0xff) / 255) ** mainTRC\n  const Bbg = ((background >> 0 & 0xff) / 255) ** mainTRC\n\n  // Apply the standard coefficients and sum to Y\n  let Ytxt = (Rtxt * Rco) + (Gtxt * Gco) + (Btxt * Bco)\n  let Ybg = (Rbg * Rco) + (Gbg * Gco) + (Bbg * Bco)\n\n  // Soft clamp Y when near black.\n  // Now clamping all colors to prevent crossover errors\n  if (Ytxt <= blkThrs) Ytxt += (blkThrs - Ytxt) ** blkClmp\n  if (Ybg <= blkThrs) Ybg += (blkThrs - Ybg) ** blkClmp\n\n  // Return 0 Early for extremely low ∆Y (lint trap #1)\n  if (Math.abs(Ybg - Ytxt) < deltaYmin) return 0.0\n\n  // SAPC CONTRAST\n\n  let outputContrast: number // For weighted final values\n  if (Ybg > Ytxt) {\n    // For normal polarity, black text on white\n    // Calculate the SAPC contrast value and scale\n\n    const SAPC = ((Ybg ** normBG) - (Ytxt ** normTXT)) * scaleBoW\n\n    // NEW! SAPC SmoothScale™\n    // Low Contrast Smooth Scale Rollout to prevent polarity reversal\n    // and also a low clip for very low contrasts (lint trap #2)\n    // much of this is for very low contrasts, less than 10\n    // therefore for most reversing needs, only loConOffset is important\n    outputContrast =\n      (SAPC < loClip) ? 0.0\n      : (SAPC < loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC - loConOffset\n  } else {\n    // For reverse polarity, light text on dark\n    // WoB should always return negative value.\n\n    const SAPC = ((Ybg ** revBG) - (Ytxt ** revTXT)) * scaleWoB\n\n    outputContrast =\n      (SAPC > -loClip) ? 0.0\n      : (SAPC > -loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC + loConOffset\n  }\n\n  return outputContrast * 100\n}\n"]}]}