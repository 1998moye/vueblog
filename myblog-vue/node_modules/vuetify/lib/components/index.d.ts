import * as vue from 'vue';
import { PropType, JSXComponent, Prop, Ref } from 'vue';
import * as vue_router from 'vue-router';
import { RouterLinkOptions } from 'vue-router';

declare const _default$11: vue.DefineComponent<{
    theme: StringConstructor;
    overlaps: vue.Prop<string[], string[]>;
    fullHeight: {
        type: vue.PropType<boolean>;
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    overlaps?: unknown;
    fullHeight?: unknown;
} & {
    fullHeight: boolean;
} & {
    theme?: string | undefined;
    overlaps?: string[] | undefined;
}>, {
    fullHeight: boolean;
}>;
//# sourceMappingURL=VApp.d.ts.map

declare const _default$10: vue.DefineComponent<{
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: PropType<string>;
        default: string;
    };
    name: Omit<{
        type: StringConstructor;
    }, "default" | "type"> & {
        type: PropType<string>;
        default: string;
    };
    priority: {
        type: NumberConstructor;
        default: number;
    };
    absolute: BooleanConstructor;
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    density: {
        type: PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    collapse: BooleanConstructor;
    color: StringConstructor;
    flat: BooleanConstructor;
    height: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    extensionHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    floating: BooleanConstructor;
    image: StringConstructor;
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    prominent: BooleanConstructor;
    prominentHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    position: {
        type: PropType<"top" | "bottom">;
        default: string;
        validator: (value: any) => boolean;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: boolean) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    name?: unknown;
    priority?: unknown;
    absolute?: unknown;
    rounded?: unknown;
    tile?: unknown;
    elevation?: unknown;
    density?: unknown;
    border?: unknown;
    collapse?: unknown;
    color?: unknown;
    flat?: unknown;
    height?: unknown;
    extensionHeight?: unknown;
    floating?: unknown;
    image?: unknown;
    modelValue?: unknown;
    prominent?: unknown;
    prominentHeight?: unknown;
    position?: unknown;
} & {
    tag: string;
    flat: boolean;
    height: string | number;
    name: string;
    position: "top" | "bottom";
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    priority: number;
    absolute: boolean;
    collapse: boolean;
    extensionHeight: string | number;
    floating: boolean;
    modelValue: boolean;
    prominent: boolean;
    prominentHeight: string | number;
} & {
    image?: string | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
}>, {
    tag: string;
    flat: boolean;
    height: string | number;
    name: string;
    position: "top" | "bottom";
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    priority: number;
    absolute: boolean;
    collapse: boolean;
    extensionHeight: string | number;
    floating: boolean;
    modelValue: boolean;
    prominent: boolean;
    prominentHeight: string | number;
}>;
//# sourceMappingURL=VAppBar.d.ts.map

declare const _default$$: vue.DefineComponent<{
    icon: {
        type: StringConstructor;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    icon?: unknown;
} & {
    icon: string;
} & {}>, {
    icon: string;
}>;
//# sourceMappingURL=VAppBarNavIcon.d.ts.map

declare const _default$_: vue.DefineComponent<{
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VAppBarTitle.d.ts.map

declare const allowedTypes: readonly ["success", "info", "warning", "error"];
declare type ContextualType = typeof allowedTypes[number];
declare const _default$Z: vue.DefineComponent<{
    color: StringConstructor;
    textColor: StringConstructor;
    variant: {
        type: PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: string;
        validator: (v: any) => boolean;
    };
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    density: {
        type: PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: {
        type: (StringConstructor | BooleanConstructor)[];
        validator: (val: boolean | string) => boolean;
    };
    borderColor: StringConstructor;
    closable: BooleanConstructor;
    closeIcon: {
        type: StringConstructor;
        default: string;
    };
    closeLabel: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: PropType<string | false>;
        default: null;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    prominent: BooleanConstructor;
    sticky: BooleanConstructor;
    text: StringConstructor;
    tip: BooleanConstructor;
    type: {
        type: PropType<"success" | "warning" | "error" | "info">;
        validator: (val: ContextualType) => boolean;
    };
}, () => false | JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: boolean) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    color?: unknown;
    textColor?: unknown;
    variant?: unknown;
    theme?: unknown;
    tag?: unknown;
    rounded?: unknown;
    tile?: unknown;
    absolute?: unknown;
    bottom?: unknown;
    fixed?: unknown;
    left?: unknown;
    position?: unknown;
    right?: unknown;
    top?: unknown;
    elevation?: unknown;
    density?: unknown;
    border?: unknown;
    borderColor?: unknown;
    closable?: unknown;
    closeIcon?: unknown;
    closeLabel?: unknown;
    icon?: unknown;
    modelValue?: unknown;
    prominent?: unknown;
    sticky?: unknown;
    text?: unknown;
    tip?: unknown;
    type?: unknown;
} & {
    fixed: boolean;
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    absolute: boolean;
    modelValue: boolean;
    prominent: boolean;
    sticky: boolean;
    icon: string | false;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    closable: boolean;
    closeIcon: string;
    closeLabel: string;
    tip: boolean;
} & {
    type?: "success" | "warning" | "error" | "info" | undefined;
    theme?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    text?: string | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    border?: string | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    textColor?: string | undefined;
    borderColor?: string | undefined;
}>, {
    fixed: boolean;
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
    modelValue: boolean;
    prominent: boolean;
    sticky: boolean;
    icon: string | false;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    closable: boolean;
    closeIcon: string;
    closeLabel: string;
    tip: boolean;
}>;

declare const _default$Y: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    color: StringConstructor;
    left: BooleanConstructor;
    right: BooleanConstructor;
    icon: StringConstructor;
    image: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    size?: unknown;
    rounded?: unknown;
    tile?: unknown;
    density?: unknown;
    color?: unknown;
    left?: unknown;
    right?: unknown;
    icon?: unknown;
    image?: unknown;
} & {
    tag: string;
    left: boolean;
    right: boolean;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    size: string | number;
} & {
    image?: string | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    icon?: string | undefined;
}>, {
    tag: string;
    left: boolean;
    right: boolean;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    size: string | number;
}>;
//# sourceMappingURL=VAvatar.d.ts.map

declare const _default$X: vue.DefineComponent<{
    transition: Omit<{
        type: vue.PropType<string | false | vue.TransitionProps>;
        default: string;
        validator: (val: unknown) => boolean;
    }, "default" | "type"> & {
        type: vue.PropType<string | false | vue.TransitionProps>;
        default: string | false | vue.TransitionProps;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    bordered: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: string;
    };
    content: StringConstructor;
    dot: BooleanConstructor;
    floating: BooleanConstructor;
    icon: StringConstructor;
    inline: BooleanConstructor;
    label: {
        type: StringConstructor;
        default: string;
    };
    location: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    max: (StringConstructor | NumberConstructor)[];
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    offsetX: (StringConstructor | NumberConstructor)[];
    offsetY: (StringConstructor | NumberConstructor)[];
    textColor: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    transition?: unknown;
    tag?: unknown;
    rounded?: unknown;
    tile?: unknown;
    bordered?: unknown;
    color?: unknown;
    content?: unknown;
    dot?: unknown;
    floating?: unknown;
    icon?: unknown;
    inline?: unknown;
    label?: unknown;
    location?: unknown;
    max?: unknown;
    modelValue?: unknown;
    offsetX?: unknown;
    offsetY?: unknown;
    textColor?: unknown;
} & {
    tag: string;
    label: string;
    transition: string | false | vue.TransitionProps;
    tile: boolean;
    color: string;
    floating: boolean;
    modelValue: boolean;
    inline: boolean;
    dot: boolean;
    bordered: boolean;
    location: string;
} & {
    rounded?: string | number | boolean | undefined;
    content?: string | undefined;
    icon?: string | undefined;
    textColor?: string | undefined;
    max?: string | number | undefined;
    offsetX?: string | number | undefined;
    offsetY?: string | number | undefined;
}>, {
    tag: string;
    label: string;
    transition: string | false | vue.TransitionProps;
    rounded: string | number | boolean;
    tile: boolean;
    color: string;
    floating: boolean;
    modelValue: boolean;
    inline: boolean;
    dot: boolean;
    bordered: boolean;
    location: string;
}>;
//# sourceMappingURL=VBadge.d.ts.map

declare const _default$W: vue.DefineComponent<{
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: vue.PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    avatar: StringConstructor;
    color: StringConstructor;
    icon: StringConstructor;
    lines: {
        type: StringConstructor;
        default: string;
    };
    sticky: BooleanConstructor;
    text: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    tag?: unknown;
    rounded?: unknown;
    tile?: unknown;
    absolute?: unknown;
    bottom?: unknown;
    fixed?: unknown;
    left?: unknown;
    position?: unknown;
    right?: unknown;
    top?: unknown;
    elevation?: unknown;
    height?: unknown;
    maxHeight?: unknown;
    maxWidth?: unknown;
    minHeight?: unknown;
    minWidth?: unknown;
    width?: unknown;
    density?: unknown;
    border?: unknown;
    avatar?: unknown;
    color?: unknown;
    icon?: unknown;
    lines?: unknown;
    sticky?: unknown;
    text?: unknown;
} & {
    fixed: boolean;
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    absolute: boolean;
    sticky: boolean;
    lines: string;
} & {
    theme?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    text?: string | undefined;
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    icon?: string | undefined;
    avatar?: string | undefined;
}>, {
    fixed: boolean;
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
    sticky: boolean;
    lines: string;
}>;
//# sourceMappingURL=VBanner.d.ts.map

declare const _default$V: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VBannerActions.d.ts.map

declare const _default$U: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    left: BooleanConstructor;
    right: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    left?: unknown;
    right?: unknown;
} & {
    tag: string;
    left: boolean;
    right: boolean;
} & {}>, {
    tag: string;
    left: boolean;
    right: boolean;
}>;
//# sourceMappingURL=VBannerAvatar.d.ts.map

declare const _default$T: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VBannerContent.d.ts.map

declare const _default$S: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VBannerText.d.ts.map

declare const _default$R: vue.DefineComponent<{
    theme: StringConstructor;
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
    name: Omit<{
        type: StringConstructor;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
    priority: {
        type: NumberConstructor;
        default: number;
    };
    absolute: BooleanConstructor;
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    bgColor: StringConstructor;
    color: StringConstructor;
    grow: BooleanConstructor;
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    mode: {
        type: StringConstructor;
        validator: (v: any) => boolean;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: boolean) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    tag?: unknown;
    name?: unknown;
    priority?: unknown;
    absolute?: unknown;
    rounded?: unknown;
    tile?: unknown;
    elevation?: unknown;
    density?: unknown;
    border?: unknown;
    bgColor?: unknown;
    color?: unknown;
    grow?: unknown;
    modelValue?: unknown;
    mode?: unknown;
    height?: unknown;
} & {
    tag: string;
    height: string | number;
    name: string;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    priority: number;
    absolute: boolean;
    modelValue: boolean;
    grow: boolean;
} & {
    mode?: string | undefined;
    theme?: string | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    bgColor?: string | undefined;
}>, {
    tag: string;
    height: string | number;
    name: string;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    priority: number;
    absolute: boolean;
    modelValue: boolean;
    grow: boolean;
}>;
//# sourceMappingURL=VBottomNavigation.d.ts.map

interface LinkProps extends Partial<RouterLinkOptions> {
    href?: string;
}

declare type BreadcrumbItem = string | (LinkProps & {
    text: string;
});
declare const _default$Q: vue.DefineComponent<{
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: PropType<string>;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    density: {
        type: PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    color: StringConstructor;
    disabled: BooleanConstructor;
    divider: {
        type: StringConstructor;
        default: string;
    };
    icon: StringConstructor;
    items: {
        type: PropType<BreadcrumbItem[]>;
        default: () => never[];
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    rounded?: unknown;
    tile?: unknown;
    density?: unknown;
    color?: unknown;
    disabled?: unknown;
    divider?: unknown;
    icon?: unknown;
    items?: unknown;
} & {
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    disabled: boolean;
    divider: string;
    items: BreadcrumbItem[];
} & {
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    icon?: string | undefined;
}>, {
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    disabled: boolean;
    divider: string;
    items: BreadcrumbItem[];
}>;

declare const _default$P: vue.DefineComponent<{
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
    href: StringConstructor;
    replace: BooleanConstructor;
    to: vue.PropType<vue_router.RouteLocationRaw>;
    active: BooleanConstructor;
    activeClass: StringConstructor;
    activeColor: StringConstructor;
    color: StringConstructor;
    disabled: BooleanConstructor;
    text: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    href?: unknown;
    replace?: unknown;
    to?: unknown;
    active?: unknown;
    activeClass?: unknown;
    activeColor?: unknown;
    color?: unknown;
    disabled?: unknown;
    text?: unknown;
} & {
    replace: boolean;
    tag: string;
    active: boolean;
    disabled: boolean;
} & {
    text?: string | undefined;
    color?: string | undefined;
    to?: vue_router.RouteLocationRaw | undefined;
    href?: string | undefined;
    activeClass?: string | undefined;
    activeColor?: string | undefined;
}>, {
    replace: boolean;
    tag: string;
    active: boolean;
    disabled: boolean;
}>;
//# sourceMappingURL=VBreadcrumbsItem.d.ts.map

declare const _default$O: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VBreadcrumbsDivider.d.ts.map

declare const _default$N: vue.DefineComponent<{
    color: StringConstructor;
    textColor: StringConstructor;
    variant: Omit<{
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: string;
        validator: (v: any) => boolean;
    }, "default" | "type"> & {
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: "text" | "contained" | "outlined" | "plain" | "contained-text";
    };
    theme: StringConstructor;
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    href: StringConstructor;
    replace: BooleanConstructor;
    to: vue.PropType<vue_router.RouteLocationRaw>;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: vue.PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    flat: BooleanConstructor;
    icon: (StringConstructor | BooleanConstructor)[];
    prependIcon: StringConstructor;
    appendIcon: StringConstructor;
    block: BooleanConstructor;
    stacked: BooleanConstructor;
    disabled: BooleanConstructor;
    ripple: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    color?: unknown;
    textColor?: unknown;
    variant?: unknown;
    theme?: unknown;
    tag?: unknown;
    size?: unknown;
    href?: unknown;
    replace?: unknown;
    to?: unknown;
    absolute?: unknown;
    bottom?: unknown;
    fixed?: unknown;
    left?: unknown;
    position?: unknown;
    right?: unknown;
    top?: unknown;
    elevation?: unknown;
    height?: unknown;
    maxHeight?: unknown;
    maxWidth?: unknown;
    minHeight?: unknown;
    minWidth?: unknown;
    width?: unknown;
    density?: unknown;
    rounded?: unknown;
    tile?: unknown;
    border?: unknown;
    flat?: unknown;
    icon?: unknown;
    prependIcon?: unknown;
    appendIcon?: unknown;
    block?: unknown;
    stacked?: unknown;
    disabled?: unknown;
    ripple?: unknown;
} & {
    replace: boolean;
    fixed: boolean;
    tag: string;
    flat: boolean;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    absolute: boolean;
    size: string | number;
    block: boolean;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    stacked: boolean;
    ripple: boolean;
} & {
    theme?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    icon?: string | boolean | undefined;
    to?: vue_router.RouteLocationRaw | undefined;
    href?: string | undefined;
    textColor?: string | undefined;
    prependIcon?: string | undefined;
    appendIcon?: string | undefined;
}>, {
    replace: boolean;
    fixed: boolean;
    tag: string;
    flat: boolean;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
    size: string | number;
    block: boolean;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    stacked: boolean;
    ripple: boolean;
}>;
//# sourceMappingURL=VBtn.d.ts.map

declare const _default$M: vue.DefineComponent<{
    color: StringConstructor;
    textColor: StringConstructor;
    variant: Omit<{
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: string;
        validator: (v: any) => boolean;
    }, "default" | "type"> & {
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: "text" | "contained" | "outlined" | "plain" | "contained-text";
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    href: StringConstructor;
    replace: BooleanConstructor;
    to: vue.PropType<vue_router.RouteLocationRaw>;
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: vue.PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    theme: StringConstructor;
    appendAvatar: StringConstructor;
    appendIcon: StringConstructor;
    disabled: BooleanConstructor;
    flat: BooleanConstructor;
    hover: BooleanConstructor;
    image: StringConstructor;
    link: BooleanConstructor;
    prependAvatar: StringConstructor;
    prependIcon: StringConstructor;
    ripple: BooleanConstructor;
    subtitle: StringConstructor;
    text: StringConstructor;
    title: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    color?: unknown;
    textColor?: unknown;
    variant?: unknown;
    tag?: unknown;
    href?: unknown;
    replace?: unknown;
    to?: unknown;
    rounded?: unknown;
    tile?: unknown;
    absolute?: unknown;
    bottom?: unknown;
    fixed?: unknown;
    left?: unknown;
    position?: unknown;
    right?: unknown;
    top?: unknown;
    elevation?: unknown;
    height?: unknown;
    maxHeight?: unknown;
    maxWidth?: unknown;
    minHeight?: unknown;
    minWidth?: unknown;
    width?: unknown;
    density?: unknown;
    border?: unknown;
    theme?: unknown;
    appendAvatar?: unknown;
    appendIcon?: unknown;
    disabled?: unknown;
    flat?: unknown;
    hover?: unknown;
    image?: unknown;
    link?: unknown;
    prependAvatar?: unknown;
    prependIcon?: unknown;
    ripple?: unknown;
    subtitle?: unknown;
    text?: unknown;
    title?: unknown;
} & {
    replace: boolean;
    fixed: boolean;
    link: boolean;
    tag: string;
    flat: boolean;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    absolute: boolean;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    ripple: boolean;
    hover: boolean;
} & {
    theme?: string | undefined;
    title?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    image?: string | undefined;
    text?: string | undefined;
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    to?: vue_router.RouteLocationRaw | undefined;
    href?: string | undefined;
    textColor?: string | undefined;
    prependIcon?: string | undefined;
    appendIcon?: string | undefined;
    appendAvatar?: string | undefined;
    prependAvatar?: string | undefined;
    subtitle?: string | undefined;
}>, {
    replace: boolean;
    fixed: boolean;
    link: boolean;
    tag: string;
    flat: boolean;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    ripple: boolean;
    hover: boolean;
}>;
//# sourceMappingURL=VCard.d.ts.map

declare const _default$L: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardActions.d.ts.map

declare const _default$K: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardAvatar.d.ts.map

declare const _default$J: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardHeader.d.ts.map

declare const _default$I: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardHeaderText.d.ts.map

declare const _default$H: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardImg.d.ts.map

declare const _default$G: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardMedia.d.ts.map

declare const _default$F: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardSubtitle.d.ts.map

declare const _default$E: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardText.d.ts.map

declare const _default$D: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardTitle.d.ts.map

declare const _default$C: vue.DefineComponent<{
    color: StringConstructor;
    textColor: StringConstructor;
    variant: Omit<{
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: string;
        validator: (v: any) => boolean;
    }, "default" | "type"> & {
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: "text" | "contained" | "outlined" | "plain" | "contained-text";
    };
    theme: StringConstructor;
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    href: StringConstructor;
    replace: BooleanConstructor;
    to: vue.PropType<vue_router.RouteLocationRaw>;
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    activeClass: StringConstructor;
    appendAvatar: StringConstructor;
    appendIcon: StringConstructor;
    closable: BooleanConstructor;
    closeIcon: {
        type: StringConstructor;
        default: string;
    };
    closeLabel: {
        type: StringConstructor;
        default: string;
    };
    disabled: BooleanConstructor;
    draggable: BooleanConstructor;
    filter: BooleanConstructor;
    filterIcon: {
        type: StringConstructor;
        default: string;
    };
    label: BooleanConstructor;
    link: BooleanConstructor;
    pill: BooleanConstructor;
    prependAvatar: StringConstructor;
    prependIcon: StringConstructor;
    ripple: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => false | JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'click:close': (e: Event) => Event;
    'update:active': (value: Boolean) => Boolean;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    color?: unknown;
    textColor?: unknown;
    variant?: unknown;
    theme?: unknown;
    tag?: unknown;
    size?: unknown;
    href?: unknown;
    replace?: unknown;
    to?: unknown;
    rounded?: unknown;
    tile?: unknown;
    elevation?: unknown;
    density?: unknown;
    border?: unknown;
    activeClass?: unknown;
    appendAvatar?: unknown;
    appendIcon?: unknown;
    closable?: unknown;
    closeIcon?: unknown;
    closeLabel?: unknown;
    disabled?: unknown;
    draggable?: unknown;
    filter?: unknown;
    filterIcon?: unknown;
    label?: unknown;
    link?: unknown;
    pill?: unknown;
    prependAvatar?: unknown;
    prependIcon?: unknown;
    ripple?: unknown;
    modelValue?: unknown;
} & {
    replace: boolean;
    link: boolean;
    tag: string;
    filter: boolean;
    label: boolean;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    modelValue: boolean;
    size: string | number;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    ripple: boolean;
    closable: boolean;
    closeIcon: string;
    closeLabel: string;
    draggable: boolean;
    filterIcon: string;
    pill: boolean;
} & {
    theme?: string | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    to?: vue_router.RouteLocationRaw | undefined;
    href?: string | undefined;
    textColor?: string | undefined;
    prependIcon?: string | undefined;
    appendIcon?: string | undefined;
    activeClass?: string | undefined;
    appendAvatar?: string | undefined;
    prependAvatar?: string | undefined;
}>, {
    replace: boolean;
    link: boolean;
    tag: string;
    filter: boolean;
    label: boolean;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    modelValue: boolean;
    size: string | number;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    ripple: boolean;
    closable: boolean;
    closeIcon: string;
    closeLabel: string;
    draggable: boolean;
    filterIcon: string;
    pill: boolean;
}>;
//# sourceMappingURL=VChip.d.ts.map

declare const VCode: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;

interface DefaultsInstance {
    [key: string]: undefined | Record<string, unknown>;
    global?: Record<string, unknown>;
}

declare const _default$B: vue.DefineComponent<{
    defaults: PropType<Partial<DefaultsInstance>>;
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>[] | undefined, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    defaults?: unknown;
} & {} & {
    defaults?: Partial<DefaultsInstance> | undefined;
}>, {}>;
//# sourceMappingURL=VDefaultsProvider.d.ts.map

declare const _default$A: vue.DefineComponent<{
    transition: Omit<{
        type: vue.PropType<string | false | vue.TransitionProps>;
        default: string;
        validator: (val: unknown) => boolean;
    }, "default" | "type"> & {
        type: vue.PropType<string | false | vue.TransitionProps | {
            component: vue.DefineComponent<{
                target: vue.PropType<HTMLElement>;
            }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
                target?: unknown;
            } & {} & {
                target?: HTMLElement | undefined;
            }>, {}>;
        }>;
        default: string | false | vue.TransitionProps | {
            component: vue.DefineComponent<{
                target: vue.PropType<HTMLElement>;
            }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
                target?: unknown;
            } & {} & {
                target?: HTMLElement | undefined;
            }>, {}>;
        };
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: {
        type: vue.PropType<string | number>;
        default: string | number;
    };
    fullscreen: BooleanConstructor;
    origin: {
        type: StringConstructor;
        default: string;
    };
    retainFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollable: BooleanConstructor;
    modelValue: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: boolean) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    transition?: unknown;
    height?: unknown;
    maxHeight?: unknown;
    maxWidth?: unknown;
    minHeight?: unknown;
    minWidth?: unknown;
    width?: unknown;
    fullscreen?: unknown;
    origin?: unknown;
    retainFocus?: unknown;
    scrollable?: unknown;
    modelValue?: unknown;
} & {
    width: string | number;
    transition: string | false | vue.TransitionProps | {
        component: vue.DefineComponent<{
            target: vue.PropType<HTMLElement>;
        }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
            target?: unknown;
        } & {} & {
            target?: HTMLElement | undefined;
        }>, {}>;
    };
    modelValue: boolean;
    origin: string;
    fullscreen: boolean;
    retainFocus: boolean;
    scrollable: boolean;
} & {
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
}>, {
    width: string | number;
    transition: string | false | vue.TransitionProps | {
        component: vue.DefineComponent<{
            target: vue.PropType<HTMLElement>;
        }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
            target?: unknown;
        } & {} & {
            target?: HTMLElement | undefined;
        }>, {}>;
    };
    modelValue: boolean;
    origin: string;
    fullscreen: boolean;
    retainFocus: boolean;
    scrollable: boolean;
}>;
//# sourceMappingURL=VDialog.d.ts.map

declare const _default$z: vue.DefineComponent<{
    theme: StringConstructor;
    inset: BooleanConstructor;
    length: (StringConstructor | NumberConstructor)[];
    thickness: (StringConstructor | NumberConstructor)[];
    vertical: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    inset?: unknown;
    length?: unknown;
    thickness?: unknown;
    vertical?: unknown;
} & {
    inset: boolean;
    vertical: boolean;
} & {
    length?: string | number | undefined;
    theme?: string | undefined;
    thickness?: string | number | undefined;
}>, {
    inset: boolean;
    vertical: boolean;
}>;
//# sourceMappingURL=VDivider.d.ts.map

declare const _default$y: vue.DefineComponent<{
    theme: StringConstructor;
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: vue.PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    tag?: unknown;
    rounded?: unknown;
    tile?: unknown;
    absolute?: unknown;
    bottom?: unknown;
    fixed?: unknown;
    left?: unknown;
    position?: unknown;
    right?: unknown;
    top?: unknown;
    elevation?: unknown;
    height?: unknown;
    maxHeight?: unknown;
    maxWidth?: unknown;
    minHeight?: unknown;
    minWidth?: unknown;
    width?: unknown;
    border?: unknown;
} & {
    fixed: boolean;
    tag: string;
    tile: boolean;
    absolute: boolean;
} & {
    theme?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
}>, {
    fixed: boolean;
    tag: string;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
}>;
//# sourceMappingURL=VFooter.d.ts.map

declare const _default$x: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    fluid: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    fluid?: unknown;
} & {
    tag: string;
    fluid: boolean;
} & {}>, {
    tag: string;
    fluid: boolean;
}>;
//# sourceMappingURL=VContainer.d.ts.map

declare const _default$w: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    alignSelf: {
        type: StringConstructor;
        default: null;
        validator: (str: any) => boolean;
    };
    order: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    offset: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    cols: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: boolean;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    alignSelf?: unknown;
    order?: unknown;
    offset?: unknown;
    cols?: unknown;
} & {
    tag: string;
    offset: string | number;
    order: string | number;
    alignSelf: string;
    cols: string | number | boolean;
} & {}>, {
    tag: string;
    offset: string | number;
    order: string | number;
    alignSelf: string;
    cols: string | number | boolean;
}>;
//# sourceMappingURL=VCol.d.ts.map

declare const _default$v: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    alignContent: {
        type: StringConstructor;
        default: null;
        validator: (str: any) => boolean;
    };
    justify: {
        type: StringConstructor;
        default: null;
        validator: (str: any) => boolean;
    };
    dense: BooleanConstructor;
    noGutters: BooleanConstructor;
    align: {
        type: StringConstructor;
        default: null;
        validator: (str: any) => boolean;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    alignContent?: unknown;
    justify?: unknown;
    dense?: unknown;
    noGutters?: unknown;
    align?: unknown;
} & {
    tag: string;
    dense: boolean;
    justify: string;
    align: string;
    alignContent: string;
    noGutters: boolean;
} & {}>, {
    tag: string;
    dense: boolean;
    justify: string;
    align: string;
    alignContent: string;
    noGutters: boolean;
}>;
//# sourceMappingURL=VRow.d.ts.map

declare const _default$u: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VSpacer.d.ts.map

declare type IconValue = string | JSXComponent;
declare const VComponentIcon: vue.DefineComponent<{
    icon: {
        type: PropType<IconValue>;
        required: true;
    };
    tag: {
        type: StringConstructor;
        required: true;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    icon?: unknown;
    tag?: unknown;
} & {
    tag: string;
    icon: IconValue;
} & {}>, {}>;
declare const VSvgIcon: vue.DefineComponent<{
    icon: {
        type: PropType<IconValue>;
        required: true;
    };
    tag: {
        type: StringConstructor;
        required: true;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    icon?: unknown;
    tag?: unknown;
} & {
    tag: string;
    icon: IconValue;
} & {}>, {}>;
declare const VLigatureIcon: vue.DefineComponent<{
    icon: {
        type: PropType<IconValue>;
        required: true;
    };
    tag: {
        type: StringConstructor;
        required: true;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    icon?: unknown;
    tag?: unknown;
} & {
    tag: string;
    icon: IconValue;
} & {}>, {}>;
declare const VClassIcon: vue.DefineComponent<{
    icon: {
        type: PropType<IconValue>;
        required: true;
    };
    tag: {
        type: StringConstructor;
        required: true;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    icon?: unknown;
    tag?: unknown;
} & {
    tag: string;
    icon: IconValue;
} & {}>, {}>;

declare const _default$t: vue.DefineComponent<{
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: PropType<string>;
        default: string;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    color: StringConstructor;
    left: BooleanConstructor;
    right: BooleanConstructor;
    icon: {
        type: PropType<IconValue>;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    size?: unknown;
    color?: unknown;
    left?: unknown;
    right?: unknown;
    icon?: unknown;
} & {
    tag: string;
    left: boolean;
    right: boolean;
    size: string | number;
} & {
    color?: string | undefined;
    icon?: IconValue | undefined;
}>, {
    tag: string;
    left: boolean;
    right: boolean;
    size: string | number;
}>;
//# sourceMappingURL=VIcon.d.ts.map

interface srcObject {
    src?: string;
    srcset?: string;
    lazySrc?: string;
    aspect: number;
}
declare const _default$s: vue.DefineComponent<{
    transition: {
        type: PropType<string | false | vue.TransitionProps>;
        default: string;
        validator: (val: unknown) => boolean;
    };
    aspectRatio: (StringConstructor | NumberConstructor)[];
    alt: StringConstructor;
    cover: BooleanConstructor;
    eager: BooleanConstructor;
    lazySrc: StringConstructor;
    options: {
        type: PropType<IntersectionObserverInit>;
        default: () => {
            root: undefined;
            rootMargin: undefined;
            threshold: undefined;
        };
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    sizes: StringConstructor;
    src: {
        type: PropType<string | srcObject>;
        default: string;
    };
    srcset: StringConstructor;
}, {
    currentSrc: vue.Ref<string>;
    image: vue.Ref<HTMLImageElement | undefined>;
    state: vue.Ref<"error" | "idle" | "loading" | "loaded">;
    naturalWidth: vue.Ref<number | undefined>;
    naturalHeight: vue.Ref<number | undefined>;
}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, ("loadstart" | "load" | "error")[], "error" | "loadstart" | "load", vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    transition?: unknown;
    aspectRatio?: unknown;
    alt?: unknown;
    cover?: unknown;
    eager?: unknown;
    lazySrc?: unknown;
    options?: unknown;
    position?: unknown;
    sizes?: unknown;
    src?: unknown;
    srcset?: unknown;
} & {
    options: IntersectionObserverInit;
    transition: string | false | vue.TransitionProps;
    cover: boolean;
    eager: boolean;
    position: string;
    src: string | srcObject;
} & {
    aspectRatio?: string | number | undefined;
    alt?: string | undefined;
    lazySrc?: string | undefined;
    sizes?: string | undefined;
    srcset?: string | undefined;
}>, {
    options: IntersectionObserverInit;
    transition: string | false | vue.TransitionProps;
    cover: boolean;
    eager: boolean;
    position: string;
    src: string | srcObject;
}>;

declare const VKbd: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;

declare const _default$r: vue.DefineComponent<{
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: (ArrayConstructor | ObjectConstructor | StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    multiple: BooleanConstructor;
    mandatory: vue.PropType<boolean | "force">;
    max: NumberConstructor;
    selectedClass: {
        type: vue.PropType<string>;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: any) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    tag?: unknown;
    modelValue?: unknown;
    multiple?: unknown;
    mandatory?: unknown;
    max?: unknown;
    selectedClass?: unknown;
} & {
    tag: string;
    multiple: boolean;
    selectedClass: string;
} & {
    theme?: string | undefined;
    modelValue?: undefined;
    mandatory?: boolean | "force" | undefined;
    max?: number | undefined;
}>, {
    tag: string;
    modelValue: undefined;
    multiple: boolean;
    selectedClass: string;
}>;

declare const _default$q: vue.DefineComponent<{
    value: {
        type: (ObjectConstructor | StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    index: NumberConstructor;
    disabled: BooleanConstructor;
    selectedClass: StringConstructor;
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>[] | undefined, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    value?: unknown;
    index?: unknown;
    disabled?: unknown;
    selectedClass?: unknown;
} & {
    disabled: boolean;
} & {
    value?: undefined;
    index?: number | undefined;
    selectedClass?: string | undefined;
}>, {
    value: undefined;
    disabled: boolean;
}>;
//# sourceMappingURL=VItem.d.ts.map

declare const _default$p: vue.DefineComponent<{
    overlaps: vue.Prop<string[], string[]>;
    fullHeight: BooleanConstructor;
}, {
    getLayoutItem: (id: string) => {
        size: number;
        top: number;
        left: number;
        right: number;
        bottom: number;
        id: string;
    } | undefined;
    items: vue.ComputedRef<{
        size: number;
        top: number;
        left: number;
        right: number;
        bottom: number;
        id: string;
    }[]>;
}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    overlaps?: unknown;
    fullHeight?: unknown;
} & {
    fullHeight: boolean;
} & {
    overlaps?: string[] | undefined;
}>, {
    fullHeight: boolean;
}>;
//# sourceMappingURL=VLayout.d.ts.map

declare const _default$o: vue.DefineComponent<{
    name: {
        type: StringConstructor;
    };
    priority: {
        type: NumberConstructor;
        default: number;
    };
    absolute: BooleanConstructor;
    position: {
        type: PropType<"top" | "left" | "right" | "bottom">;
        required: true;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    modelValue: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    name?: unknown;
    priority?: unknown;
    absolute?: unknown;
    position?: unknown;
    size?: unknown;
    modelValue?: unknown;
} & {
    position: "top" | "left" | "right" | "bottom";
    priority: number;
    absolute: boolean;
    modelValue: boolean;
    size: string | number;
} & {
    name?: string | undefined;
}>, {
    priority: number;
    absolute: boolean;
    modelValue: boolean;
    size: string | number;
}>;
//# sourceMappingURL=VLayoutItem.d.ts.map

declare const _default$n: vue.DefineComponent<{
    locale: StringConstructor;
    fallbackLocale: StringConstructor;
    messages: ObjectConstructor;
    rtl: {
        type: BooleanConstructor;
        default: undefined;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    locale?: unknown;
    fallbackLocale?: unknown;
    messages?: unknown;
    rtl?: unknown;
} & {} & {
    rtl?: boolean | undefined;
    locale?: string | undefined;
    fallbackLocale?: string | undefined;
    messages?: Record<string, any> | undefined;
}>, {
    rtl: boolean;
}>;
//# sourceMappingURL=VLocaleProvider.d.ts.map

declare const _default$m: vue.DefineComponent<{
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    color: StringConstructor;
    disabled: BooleanConstructor;
    lines: {
        type: StringConstructor;
        default: string;
    };
    nav: BooleanConstructor;
    subheader: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    tag?: unknown;
    rounded?: unknown;
    tile?: unknown;
    elevation?: unknown;
    height?: unknown;
    maxHeight?: unknown;
    maxWidth?: unknown;
    minHeight?: unknown;
    minWidth?: unknown;
    width?: unknown;
    density?: unknown;
    border?: unknown;
    color?: unknown;
    disabled?: unknown;
    lines?: unknown;
    nav?: unknown;
    subheader?: unknown;
} & {
    tag: string;
    nav: boolean;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    disabled: boolean;
    lines: string;
    subheader: string | boolean;
} & {
    theme?: string | undefined;
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
}>, {
    tag: string;
    nav: boolean;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    disabled: boolean;
    lines: string;
    subheader: string | boolean;
}>;
//# sourceMappingURL=VList.d.ts.map

declare const _default$l: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    color: StringConstructor;
    inset: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    color?: unknown;
    inset?: unknown;
} & {
    tag: string;
    inset: boolean;
} & {
    color?: string | undefined;
}>, {
    tag: string;
    inset: boolean;
}>;
//# sourceMappingURL=VListSubheader.d.ts.map

declare const _default$k: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VListImg.d.ts.map

declare const _default$j: vue.DefineComponent<{
    color: StringConstructor;
    textColor: StringConstructor;
    variant: Omit<{
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: string;
        validator: (v: any) => boolean;
    }, "default" | "type"> & {
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: "text" | "contained" | "outlined" | "plain" | "contained-text";
    };
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    href: StringConstructor;
    replace: BooleanConstructor;
    to: vue.PropType<vue_router.RouteLocationRaw>;
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    active: BooleanConstructor;
    activeColor: StringConstructor;
    activeClass: StringConstructor;
    appendAvatar: StringConstructor;
    appendIcon: StringConstructor;
    disabled: BooleanConstructor;
    link: BooleanConstructor;
    prependAvatar: StringConstructor;
    prependIcon: StringConstructor;
    subtitle: StringConstructor;
    title: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    color?: unknown;
    textColor?: unknown;
    variant?: unknown;
    theme?: unknown;
    tag?: unknown;
    href?: unknown;
    replace?: unknown;
    to?: unknown;
    rounded?: unknown;
    tile?: unknown;
    elevation?: unknown;
    height?: unknown;
    maxHeight?: unknown;
    maxWidth?: unknown;
    minHeight?: unknown;
    minWidth?: unknown;
    width?: unknown;
    density?: unknown;
    border?: unknown;
    active?: unknown;
    activeColor?: unknown;
    activeClass?: unknown;
    appendAvatar?: unknown;
    appendIcon?: unknown;
    disabled?: unknown;
    link?: unknown;
    prependAvatar?: unknown;
    prependIcon?: unknown;
    subtitle?: unknown;
    title?: unknown;
} & {
    replace: boolean;
    link: boolean;
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    active: boolean;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
} & {
    theme?: string | undefined;
    title?: string | undefined;
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    to?: vue_router.RouteLocationRaw | undefined;
    href?: string | undefined;
    textColor?: string | undefined;
    prependIcon?: string | undefined;
    appendIcon?: string | undefined;
    activeClass?: string | undefined;
    activeColor?: string | undefined;
    appendAvatar?: string | undefined;
    prependAvatar?: string | undefined;
    subtitle?: string | undefined;
}>, {
    replace: boolean;
    link: boolean;
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    active: boolean;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
}>;
//# sourceMappingURL=VListItem.d.ts.map

declare const _default$i: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    left: BooleanConstructor;
    right: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    left?: unknown;
    right?: unknown;
} & {
    tag: string;
    left: boolean;
    right: boolean;
} & {}>, {
    tag: string;
    left: boolean;
    right: boolean;
}>;
//# sourceMappingURL=VListItemAvatar.d.ts.map

declare const _default$h: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VListItemHeader.d.ts.map

declare const _default$g: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    left: BooleanConstructor;
    right: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    left?: unknown;
    right?: unknown;
} & {
    tag: string;
    left: boolean;
    right: boolean;
} & {}>, {
    tag: string;
    left: boolean;
    right: boolean;
}>;
//# sourceMappingURL=VListItemMedia.d.ts.map

declare const _default$f: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VListItemSubtitle.d.ts.map

declare const _default$e: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VListItemTitle.d.ts.map

declare const _default$d: vue.DefineComponent<{
    transition: Omit<{
        type: PropType<string | false | vue.TransitionProps>;
        default: string;
        validator: (val: unknown) => boolean;
    }, "default" | "type"> & {
        type: PropType<string | false | vue.TransitionProps>;
        default: string | false | vue.TransitionProps;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    modelValue: BooleanConstructor;
    options: {
        type: PropType<IntersectionObserverInit>;
        default: () => {
            root: undefined;
            rootMargin: undefined;
            threshold: undefined;
        };
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: boolean) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    transition?: unknown;
    tag?: unknown;
    height?: unknown;
    maxHeight?: unknown;
    maxWidth?: unknown;
    minHeight?: unknown;
    minWidth?: unknown;
    width?: unknown;
    modelValue?: unknown;
    options?: unknown;
} & {
    tag: string;
    options: IntersectionObserverInit;
    transition: string | false | vue.TransitionProps;
    modelValue: boolean;
} & {
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
}>, {
    tag: string;
    options: IntersectionObserverInit;
    transition: string | false | vue.TransitionProps;
    modelValue: boolean;
}>;
//# sourceMappingURL=VLazy.d.ts.map

declare const _default$c: vue.DefineComponent<{
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
} & {
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VMain.d.ts.map

declare const _default$b: vue.DefineComponent<{
    theme: StringConstructor;
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: PropType<string>;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    name: {
        type: StringConstructor;
    };
    priority: {
        type: NumberConstructor;
        default: number;
    };
    absolute: BooleanConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    color: StringConstructor;
    disableResizeWatcher: BooleanConstructor;
    expandOnHover: BooleanConstructor;
    floating: BooleanConstructor;
    modelValue: {
        type: BooleanConstructor;
        default: null;
    };
    permanent: BooleanConstructor;
    rail: BooleanConstructor;
    railWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    image: StringConstructor;
    temporary: BooleanConstructor;
    width: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    position: {
        type: PropType<"left" | "right" | "bottom">;
        default: string;
        validator: (value: any) => boolean;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    tag?: unknown;
    rounded?: unknown;
    tile?: unknown;
    name?: unknown;
    priority?: unknown;
    absolute?: unknown;
    elevation?: unknown;
    border?: unknown;
    color?: unknown;
    disableResizeWatcher?: unknown;
    expandOnHover?: unknown;
    floating?: unknown;
    modelValue?: unknown;
    permanent?: unknown;
    rail?: unknown;
    railWidth?: unknown;
    image?: unknown;
    temporary?: unknown;
    width?: unknown;
    position?: unknown;
} & {
    tag: string;
    width: string | number;
    position: "left" | "right" | "bottom";
    tile: boolean;
    priority: number;
    absolute: boolean;
    floating: boolean;
    modelValue: boolean;
    disableResizeWatcher: boolean;
    expandOnHover: boolean;
    permanent: boolean;
    rail: boolean;
    railWidth: string | number;
    temporary: boolean;
} & {
    theme?: string | undefined;
    image?: string | undefined;
    name?: string | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
}>, {
    tag: string;
    width: string | number;
    position: "left" | "right" | "bottom";
    rounded: string | number | boolean;
    tile: boolean;
    priority: number;
    absolute: boolean;
    floating: boolean;
    modelValue: boolean;
    disableResizeWatcher: boolean;
    expandOnHover: boolean;
    permanent: boolean;
    rail: boolean;
    railWidth: string | number;
    temporary: boolean;
}>;
//# sourceMappingURL=VNavigationDrawer.d.ts.map

declare const _default$a: vue.DefineComponent<{
    transition: {
        type: PropType<string | false | vue.TransitionProps>;
        default: string;
        validator: (val: unknown) => boolean;
    };
    theme: StringConstructor;
    absolute: BooleanConstructor;
    attach: {
        type: PropType<string | boolean | Element>;
        default: string;
    };
    eager: BooleanConstructor;
    noClickAnimation: BooleanConstructor;
    modelValue: BooleanConstructor;
    origin: Prop<string | Element, string | Element>;
    persistent: BooleanConstructor;
    positionStrategy: {
        type: PropType<"global" | "connected" | "flexible">;
        default: string;
        validator: (val: any) => boolean;
    };
    scrim: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    scrollStrategy: {
        type: PropType<"block" | "close" | "reposition">;
        default: string;
        validator: (val: any) => boolean;
    };
}, {
    animateClick: () => void;
    content: Ref<HTMLElement | undefined>;
}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'click:outside': (e: MouseEvent) => true;
    'update:modelValue': (value: boolean) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    transition?: unknown;
    theme?: unknown;
    absolute?: unknown;
    attach?: unknown;
    eager?: unknown;
    noClickAnimation?: unknown;
    modelValue?: unknown;
    origin?: unknown;
    persistent?: unknown;
    positionStrategy?: unknown;
    scrim?: unknown;
    scrollStrategy?: unknown;
} & {
    transition: string | false | vue.TransitionProps;
    eager: boolean;
    absolute: boolean;
    modelValue: boolean;
    attach: string | boolean | Element;
    noClickAnimation: boolean;
    persistent: boolean;
    positionStrategy: "global" | "connected" | "flexible";
    scrim: string | boolean;
    scrollStrategy: "block" | "close" | "reposition";
} & {
    theme?: string | undefined;
    origin?: string | Element | undefined;
}>, {
    transition: string | false | vue.TransitionProps;
    eager: boolean;
    absolute: boolean;
    modelValue: boolean;
    attach: string | boolean | Element;
    noClickAnimation: boolean;
    persistent: boolean;
    positionStrategy: "global" | "connected" | "flexible";
    scrim: string | boolean;
    scrollStrategy: "block" | "close" | "reposition";
}>;
//# sourceMappingURL=VOverlay.d.ts.map

declare const _default$9: vue.DefineComponent<{
    color: StringConstructor;
    textColor: StringConstructor;
    variant: Omit<{
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: string;
        validator: (v: any) => boolean;
    }, "default" | "type"> & {
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: "text" | "contained" | "outlined" | "plain" | "contained-text";
    };
    theme: StringConstructor;
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
    start: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    modelValue: {
        type: NumberConstructor;
        default: (props: any) => any;
    };
    disabled: BooleanConstructor;
    length: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
        validator: (val: number) => boolean;
    };
    totalVisible: (StringConstructor | NumberConstructor)[];
    firstIcon: {
        type: StringConstructor;
        default: string;
    };
    prevIcon: {
        type: StringConstructor;
        default: string;
    };
    nextIcon: {
        type: StringConstructor;
        default: string;
    };
    lastIcon: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        default: string;
    };
    pageAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    currentPageAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    firstAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    previousAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    nextAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    lastAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    ellipsis: {
        type: StringConstructor;
        default: string;
    };
    showFirstLastPage: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: number) => true;
    first: (value: number) => true;
    prev: (value: number) => true;
    next: (value: number) => true;
    last: (value: number) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    color?: unknown;
    textColor?: unknown;
    variant?: unknown;
    theme?: unknown;
    border?: unknown;
    size?: unknown;
    rounded?: unknown;
    tile?: unknown;
    density?: unknown;
    elevation?: unknown;
    tag?: unknown;
    start?: unknown;
    modelValue?: unknown;
    disabled?: unknown;
    length?: unknown;
    totalVisible?: unknown;
    firstIcon?: unknown;
    prevIcon?: unknown;
    nextIcon?: unknown;
    lastIcon?: unknown;
    ariaLabel?: unknown;
    pageAriaLabel?: unknown;
    currentPageAriaLabel?: unknown;
    firstAriaLabel?: unknown;
    previousAriaLabel?: unknown;
    nextAriaLabel?: unknown;
    lastAriaLabel?: unknown;
    ellipsis?: unknown;
    showFirstLastPage?: unknown;
} & {
    length: string | number;
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    modelValue: number;
    start: string | number;
    ellipsis: string;
    size: string | number;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    firstIcon: string;
    prevIcon: string;
    nextIcon: string;
    lastIcon: string;
    ariaLabel: string;
    pageAriaLabel: string;
    currentPageAriaLabel: string;
    firstAriaLabel: string;
    previousAriaLabel: string;
    nextAriaLabel: string;
    lastAriaLabel: string;
    showFirstLastPage: boolean;
} & {
    theme?: string | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    textColor?: string | undefined;
    totalVisible?: string | number | undefined;
}>, {
    length: string | number;
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    modelValue: number;
    start: string | number;
    ellipsis: string;
    size: string | number;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    firstIcon: string;
    prevIcon: string;
    nextIcon: string;
    lastIcon: string;
    ariaLabel: string;
    pageAriaLabel: string;
    currentPageAriaLabel: string;
    firstAriaLabel: string;
    previousAriaLabel: string;
    nextAriaLabel: string;
    lastAriaLabel: string;
    showFirstLastPage: boolean;
}>;
//# sourceMappingURL=VPagination.d.ts.map

declare const _default$8: vue.DefineComponent<{
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: vue.PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    color: {
        type: StringConstructor;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    tag?: unknown;
    rounded?: unknown;
    tile?: unknown;
    absolute?: unknown;
    bottom?: unknown;
    fixed?: unknown;
    left?: unknown;
    position?: unknown;
    right?: unknown;
    top?: unknown;
    elevation?: unknown;
    height?: unknown;
    maxHeight?: unknown;
    maxWidth?: unknown;
    minHeight?: unknown;
    minWidth?: unknown;
    width?: unknown;
    border?: unknown;
    color?: unknown;
} & {
    fixed: boolean;
    tag: string;
    tile: boolean;
    absolute: boolean;
    color: string;
} & {
    theme?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
}>, {
    fixed: boolean;
    tag: string;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
    color: string;
}>;
//# sourceMappingURL=VSheet.d.ts.map

declare const _default$7: vue.DefineComponent<{
    theme: StringConstructor;
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: PropType<string>;
        default: string;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    bgColor: StringConstructor;
    color: StringConstructor;
    indeterminate: PropType<boolean | "disable-shrink">;
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rotate: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    tag?: unknown;
    size?: unknown;
    bgColor?: unknown;
    color?: unknown;
    indeterminate?: unknown;
    modelValue?: unknown;
    rotate?: unknown;
    width?: unknown;
} & {
    tag: string;
    width: string | number;
    modelValue: string | number;
    size: string | number;
    rotate: string | number;
} & {
    theme?: string | undefined;
    color?: string | undefined;
    bgColor?: string | undefined;
    indeterminate?: boolean | "disable-shrink" | undefined;
}>, {
    tag: string;
    width: string | number;
    modelValue: string | number;
    size: string | number;
    rotate: string | number;
}>;
//# sourceMappingURL=VProgressCircular.d.ts.map

declare const _default$6: vue.DefineComponent<{
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    name: StringConstructor;
    itemAriaLabel: {
        type: StringConstructor;
        default: string;
    };
    activeColor: StringConstructor;
    color: StringConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    emptyIcon: {
        type: StringConstructor;
        default: string;
    };
    fullIcon: {
        type: StringConstructor;
        default: string;
    };
    halfIncrements: BooleanConstructor;
    hover: BooleanConstructor;
    length: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    readonly: BooleanConstructor;
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    itemLabels: Prop<string[], string[]>;
    itemLabelPosition: {
        type: StringConstructor;
        default: string;
        validator: (v: any) => boolean;
    };
    ripple: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: number) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    tag?: unknown;
    size?: unknown;
    density?: unknown;
    name?: unknown;
    itemAriaLabel?: unknown;
    activeColor?: unknown;
    color?: unknown;
    clearable?: unknown;
    disabled?: unknown;
    emptyIcon?: unknown;
    fullIcon?: unknown;
    halfIncrements?: unknown;
    hover?: unknown;
    length?: unknown;
    readonly?: unknown;
    modelValue?: unknown;
    itemLabels?: unknown;
    itemLabelPosition?: unknown;
    ripple?: unknown;
} & {
    length: string | number;
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    modelValue: number;
    size: string | number;
    disabled: boolean;
    ripple: boolean;
    hover: boolean;
    itemAriaLabel: string;
    clearable: boolean;
    emptyIcon: string;
    fullIcon: string;
    halfIncrements: boolean;
    readonly: boolean;
    itemLabelPosition: string;
} & {
    theme?: string | undefined;
    name?: string | undefined;
    color?: string | undefined;
    activeColor?: string | undefined;
    itemLabels?: string[] | undefined;
}>, {
    length: string | number;
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    modelValue: number;
    size: string | number;
    disabled: boolean;
    ripple: boolean;
    hover: boolean;
    itemAriaLabel: string;
    clearable: boolean;
    emptyIcon: string;
    fullIcon: string;
    halfIncrements: boolean;
    readonly: boolean;
    itemLabelPosition: string;
}>;
//# sourceMappingURL=VRating.d.ts.map

declare const _default$5: vue.DefineComponent<{
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    aspectRatio: (StringConstructor | NumberConstructor)[];
    contentClass: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    height?: unknown;
    maxHeight?: unknown;
    maxWidth?: unknown;
    minHeight?: unknown;
    minWidth?: unknown;
    width?: unknown;
    aspectRatio?: unknown;
    contentClass?: unknown;
} & {} & {
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    aspectRatio?: string | number | undefined;
    contentClass?: string | undefined;
}>, {}>;

declare const _default$4: vue.DefineComponent<{
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: vue.PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    lightsOut: BooleanConstructor;
    window: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    tag?: unknown;
    rounded?: unknown;
    tile?: unknown;
    absolute?: unknown;
    bottom?: unknown;
    fixed?: unknown;
    left?: unknown;
    position?: unknown;
    right?: unknown;
    top?: unknown;
    elevation?: unknown;
    height?: unknown;
    maxHeight?: unknown;
    maxWidth?: unknown;
    minHeight?: unknown;
    minWidth?: unknown;
    width?: unknown;
    border?: unknown;
    lightsOut?: unknown;
    window?: unknown;
} & {
    fixed: boolean;
    tag: string;
    tile: boolean;
    absolute: boolean;
    lightsOut: boolean;
    window: boolean;
} & {
    theme?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
}>, {
    fixed: boolean;
    tag: string;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
    lightsOut: boolean;
    window: boolean;
}>;
//# sourceMappingURL=VSystemBar.d.ts.map

declare const _default$3: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    theme: StringConstructor;
    withBackground: BooleanConstructor;
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>[] | JSX.Element | undefined, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag?: unknown;
    theme?: unknown;
    withBackground?: unknown;
} & {
    tag: string;
    withBackground: boolean;
} & {
    theme?: string | undefined;
}>, {
    tag: string;
    withBackground: boolean;
}>;
//# sourceMappingURL=VThemeProvider.d.ts.map

declare type TimelineDirection = 'vertical' | 'horizontal';
declare type TimelineSide = 'before' | 'after' | undefined;
declare const _default$2: vue.DefineComponent<{
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    direction: Prop<TimelineDirection, TimelineDirection>;
    side: Prop<TimelineSide, TimelineSide>;
    lineInset: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    lineThickness: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    lineColor: StringConstructor;
    truncateLine: {
        type: StringConstructor;
        default: string;
        validator: (v: any) => boolean;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    theme?: unknown;
    tag?: unknown;
    density?: unknown;
    direction?: unknown;
    side?: unknown;
    lineInset?: unknown;
    lineThickness?: unknown;
    lineColor?: unknown;
    truncateLine?: unknown;
} & {
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    lineInset: string | number;
    lineThickness: string | number;
    truncateLine: string;
} & {
    theme?: string | undefined;
    lineColor?: string | undefined;
    direction?: TimelineDirection | undefined;
    side?: TimelineSide;
}>, {
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    lineInset: string | number;
    lineThickness: string | number;
    truncateLine: string;
}>;

declare const _default$1: vue.DefineComponent<{
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    tag: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    dotColor: StringConstructor;
    fillDot: BooleanConstructor;
    hideDot: BooleanConstructor;
    hideOpposite: {
        type: BooleanConstructor;
        default: undefined;
    };
    icon: StringConstructor;
    iconColor: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    height?: unknown;
    maxHeight?: unknown;
    maxWidth?: unknown;
    minHeight?: unknown;
    minWidth?: unknown;
    width?: unknown;
    tag?: unknown;
    size?: unknown;
    elevation?: unknown;
    rounded?: unknown;
    tile?: unknown;
    dotColor?: unknown;
    fillDot?: unknown;
    hideDot?: unknown;
    hideOpposite?: unknown;
    icon?: unknown;
    iconColor?: unknown;
} & {
    tag: string;
    tile: boolean;
    size: string | number;
    hideDot: boolean;
    fillDot: boolean;
} & {
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    icon?: string | undefined;
    iconColor?: string | undefined;
    dotColor?: string | undefined;
    hideOpposite?: boolean | undefined;
}>, {
    tag: string;
    rounded: string | number | boolean;
    tile: boolean;
    size: string | number;
    hideDot: boolean;
    fillDot: boolean;
    hideOpposite: boolean;
}>;
//# sourceMappingURL=VTimelineItem.d.ts.map

declare const _default: vue.DefineComponent<{
    target: PropType<HTMLElement>;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    target?: unknown;
} & {} & {
    target?: HTMLElement | undefined;
}>, {}>;
//# sourceMappingURL=dialog-transition.d.ts.map

declare const VCarouselTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VCarouselReverseTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VTabTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VTabReverseTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VMenuTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VFabTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VDialogBottomTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VDialogTopTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VFadeTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VScaleTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VScrollXTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VScrollXReverseTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VScrollYTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VScrollYReverseTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VSlideXTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VSlideXReverseTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VSlideYTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VSlideYReverseTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    group?: unknown;
    hideOnLeave?: unknown;
    leaveAbsolute?: unknown;
    mode?: unknown;
    origin?: unknown;
} & {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VExpandTransition: vue.DefineComponent<{
    mode: vue.Prop<"in-out" | "out-in" | "default", "in-out" | "out-in" | "default">;
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode?: unknown;
} & {} & {
    mode?: "in-out" | "out-in" | "default" | undefined;
}>, {}>;
declare const VExpandXTransition: vue.DefineComponent<{
    mode: vue.Prop<"in-out" | "out-in" | "default", "in-out" | "out-in" | "default">;
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode?: unknown;
} & {} & {
    mode?: "in-out" | "out-in" | "default" | undefined;
}>, {}>;

export { _default$Z as VAlert, _default$11 as VApp, _default$10 as VAppBar, _default$$ as VAppBarNavIcon, _default$_ as VAppBarTitle, _default$Y as VAvatar, _default$X as VBadge, _default$W as VBanner, _default$V as VBannerActions, _default$U as VBannerAvatar, _default$T as VBannerContent, _default$S as VBannerText, _default$R as VBottomNavigation, _default$Q as VBreadcrumbs, _default$O as VBreadcrumbsDivider, _default$P as VBreadcrumbsItem, _default$N as VBtn, _default$M as VCard, _default$L as VCardActions, _default$K as VCardAvatar, _default$J as VCardHeader, _default$I as VCardHeaderText, _default$H as VCardImg, _default$I as VCardItem, _default$G as VCardMedia, _default$F as VCardSubtitle, _default$E as VCardText, _default$D as VCardTitle, VCarouselReverseTransition, VCarouselTransition, _default$C as VChip, VClassIcon, VCode, _default$w as VCol, VComponentIcon, _default$x as VContainer, _default$B as VDefaultsProvider, _default$A as VDialog, VDialogBottomTransition, VDialogTopTransition, _default as VDialogTransition, _default$z as VDivider, VExpandTransition, VExpandXTransition, VFabTransition, VFadeTransition, _default$y as VFooter, _default$t as VIcon, _default$s as VImg, _default$q as VItem, _default$r as VItemGroup, VKbd, _default$p as VLayout, _default$o as VLayoutItem, _default$d as VLazy, VLigatureIcon, _default$m as VList, _default$k as VListImg, _default$j as VListItem, _default$i as VListItemAvatar, _default$h as VListItemHeader, _default$g as VListItemMedia, _default$f as VListItemSubtitle, _default$e as VListItemTitle, _default$l as VListSubheader, _default$n as VLocaleProvider, _default$c as VMain, VMenuTransition, _default$b as VNavigationDrawer, _default$a as VOverlay, _default$9 as VPagination, _default$7 as VProgressCircular, _default$6 as VRating, _default$5 as VResponsive, _default$v as VRow, VScaleTransition, VScrollXReverseTransition, VScrollXTransition, VScrollYReverseTransition, VScrollYTransition, _default$8 as VSheet, VSlideXReverseTransition, VSlideXTransition, VSlideYReverseTransition, VSlideYTransition, _default$u as VSpacer, VSvgIcon, _default$4 as VSystemBar, VTabReverseTransition, VTabTransition, _default$3 as VThemeProvider, _default$2 as VTimeline, _default$1 as VTimelineItem };
