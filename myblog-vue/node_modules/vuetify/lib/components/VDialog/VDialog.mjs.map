{"version":3,"sources":["../../../src/components/VDialog/VDialog.tsx"],"names":["VDialogTransition","VOverlay","makeDimensionProps","useDimension","makeTransitionProps","useProxiedModel","mergeProps","ref","watch","defineComponent","IN_BROWSER","name","props","fullscreen","Boolean","origin","type","String","default","retainFocus","scrollable","modelValue","width","transition","component","emits","value","setup","attrs","slots","isActive","dimensionStyles","overlay","onFocusin","e","before","relatedTarget","after","target","content","document","includes","contains","focusable","querySelectorAll","filter","el","hasAttribute","length","firstElement","lastElement","focus","val","addEventListener","removeEventListener","immediate","activatorElement","activator","data","onClick","currentTarget"],"mappings":"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","sourcesContent":["// Styles\nimport './VDialog.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { mergeProps, ref, watch } from 'vue'\nimport { defineComponent, IN_BROWSER } from '@/util'\n\nexport default defineComponent({\n  name: 'VDialog',\n\n  props: {\n    fullscreen: Boolean,\n    origin: {\n      type: String,\n      default: 'center center',\n    },\n    retainFocus: {\n      type: Boolean,\n      default: true,\n    },\n    scrollable: Boolean,\n    modelValue: Boolean,\n\n    ...makeDimensionProps({ width: 'auto' }),\n    ...makeTransitionProps({\n      transition: { component: VDialogTransition },\n    }),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { dimensionStyles } = useDimension(props)\n\n    const overlay = ref<InstanceType<typeof VOverlay>>()\n    function onFocusin (e: FocusEvent) {\n      const before = e.relatedTarget as HTMLElement | null\n      const after = e.target as HTMLElement | null\n\n      if (\n        before !== after &&\n        overlay.value?.content &&\n        // It isn't the document or the dialog body\n        ![document, overlay.value.content].includes(after!) &&\n        // It isn't inside the dialog body\n        !overlay.value.content.contains(after)\n        // We're the topmost dialog\n        // TODO: this.activeZIndex >= this.getMaxZIndex() &&\n        // It isn't inside a dependent element (like a menu)\n        // TODO: !this.getOpenDependentElements().some(el => el.contains(target))\n        // So we must have focused something outside the dialog and its children\n      ) {\n        const focusable = [...overlay.value.content.querySelectorAll(\n          'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        )].filter(el => !el.hasAttribute('disabled')) as HTMLElement[]\n\n        if (!focusable.length) return\n\n        const firstElement = focusable[0]\n        const lastElement = focusable[focusable.length - 1]\n\n        if (before === firstElement) {\n          lastElement.focus()\n        } else {\n          firstElement.focus()\n        }\n      }\n    }\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val\n          ? document.addEventListener('focusin', onFocusin)\n          : document.removeEventListener('focusin', onFocusin)\n      }, { immediate: true })\n    }\n\n    const activatorElement = ref()\n    const activator = ({ props, ...data }: any) => {\n      return slots.activator?.({\n        ...data,\n        props: mergeProps(props, {\n          'aria-haspopup': 'dialog',\n          onClick: (e: MouseEvent) => {\n            activatorElement.value = e.currentTarget\n          },\n        }),\n      })\n    }\n\n    return () => {\n      const transition = mergeProps(\n        { target: activatorElement.value },\n        typeof props.transition === 'string'\n          ? { name: props.transition }\n          : props.transition as any\n      ) as any\n\n      return (\n        <VOverlay\n          v-model={ isActive.value }\n          class={[\n            'v-dialog',\n            {\n              'v-dialog--fullscreen': props.fullscreen,\n            },\n          ]}\n          style={ dimensionStyles.value }\n          transition={ transition }\n          ref={ overlay }\n          aria-role=\"dialog\"\n          aria-modal=\"true\"\n          { ...attrs }\n          v-slots={{\n            default: slots.default,\n            activator,\n          }}\n        />\n      )\n    }\n  },\n})\n"],"file":"VDialog.mjs"}