{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanelHeader.ts"],"names":["VFadeTransition","VIcon","Colorable","inject","RegistrableInject","ripple","getSlot","mixins","baseMixins","extend","name","directives","props","disableIconRotate","Boolean","expandIcon","type","String","default","hideActions","Object","data","hasMousedown","computed","classes","isActive","expansionPanel","isDisabled","isReadonly","created","registerHeader","beforeDestroy","unregisterHeader","methods","onClick","e","$emit","genIcon","icon","$createElement","staticClass","class","value","render","h","setBackgroundColor","color","attrs","tabindex","on","$listeners","click","mousedown","mouseup","open"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\n// Components\nimport { VFadeTransition } from '../transitions'\nimport VExpansionPanel from './VExpansionPanel'\nimport VIcon from '../VIcon'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Directives\nimport ripple from '../../directives/ripple'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  $el: HTMLElement\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-header',\n\n  directives: { ripple },\n\n  props: {\n    disableIconRotate: Boolean,\n    expandIcon: {\n      type: String,\n      default: '$expand',\n    },\n    hideActions: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: false,\n    },\n  },\n\n  data: () => ({\n    hasMousedown: false,\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel-header--active': this.isActive,\n        'v-expansion-panel-header--mousedown': this.hasMousedown,\n      }\n    },\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n    isDisabled (): boolean {\n      return this.expansionPanel.isDisabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanel.isReadonly\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerHeader(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterHeader()\n  },\n\n  methods: {\n    onClick (e: MouseEvent) {\n      this.$emit('click', e)\n    },\n    genIcon () {\n      const icon = getSlot(this, 'actions') ||\n        [this.$createElement(VIcon, this.expandIcon)]\n\n      return this.$createElement(VFadeTransition, [\n        this.$createElement('div', {\n          staticClass: 'v-expansion-panel-header__icon',\n          class: {\n            'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate,\n          },\n          directives: [{\n            name: 'show',\n            value: !this.isDisabled,\n          }],\n        }, icon),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('button', this.setBackgroundColor(this.color, {\n      staticClass: 'v-expansion-panel-header',\n      class: this.classes,\n      attrs: {\n        tabindex: this.isDisabled ? -1 : null,\n        type: 'button',\n        'aria-expanded': this.isActive,\n      },\n      directives: [{\n        name: 'ripple',\n        value: this.ripple,\n      }],\n      on: {\n        ...this.$listeners,\n        click: this.onClick,\n        mousedown: () => (this.hasMousedown = true),\n        mouseup: () => (this.hasMousedown = false),\n      },\n    }), [\n      getSlot(this, 'default', { open: this.isActive }, true),\n      this.hideActions || this.genIcon(),\n    ])\n  },\n})\n"],"file":"VExpansionPanelHeader.mjs"}