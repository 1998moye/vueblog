{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanelContent.ts"],"names":["VExpandTransition","Bootable","Colorable","inject","RegistrableInject","getSlot","mixins","baseMixins","extend","name","data","isActive","computed","parentIsActive","expansionPanel","watch","immediate","handler","val","oldVal","isBooted","$nextTick","created","registerContent","beforeDestroy","unregisterContent","render","h","showLazyContent","setBackgroundColor","color","staticClass","directives","value","class"],"mappings":"AAAA;;AACA;AAEA;SAESA,iB,oCAET;;OACOC,Q;OACAC,S;SACEC,MAAM,IAAIC,iB,wCAEnB;;SACSC,O;OACFC,M,+BAEP;;AAGA,MAAMC,UAAU,GAAGD,MAAM,CACvBL,QADuB,EAEvBC,SAFuB,EAGvBE,iBAAiB,CAAwC,gBAAxC,EAA0D,2BAA1D,EAAuF,mBAAvF,CAHM,CAAzB;;AAUA;AACA,eAAeG,UAAU,CAACC,MAAX,GAA6BA,MAA7B,CAAoC;AACjDC,EAAAA,IAAI,EAAE,2BAD2C;AAGjDC,EAAAA,IAAI,EAAE,OAAO;AACXC,IAAAA,QAAQ,EAAE;AADC,GAAP,CAH2C;AAOjDC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,GAAa;AACzB,aAAO,KAAKC,cAAL,CAAoBH,QAA3B;AACD;;AAHO,GAPuC;AAajDI,EAAAA,KAAK,EAAE;AACLF,IAAAA,cAAc,EAAE;AACdG,MAAAA,SAAS,EAAE,IADG;;AAEdC,MAAAA,OAAO,CAAEC,GAAF,EAAOC,MAAP,EAAe;AACpB,YAAID,GAAJ,EAAS,KAAKE,QAAL,GAAgB,IAAhB;AAET,YAAID,MAAM,IAAI,IAAd,EAAoB,KAAKR,QAAL,GAAgBO,GAAhB,CAApB,KACK,KAAKG,SAAL,CAAe,MAAM,KAAKV,QAAL,GAAgBO,GAArC;AACN;;AAPa;AADX,GAb0C;;AAyBjDI,EAAAA,OAAO,GAAI;AACT,SAAKR,cAAL,CAAoBS,eAApB,CAAoC,IAApC;AACD,GA3BgD;;AA6BjDC,EAAAA,aAAa,GAAI;AACf,SAAKV,cAAL,CAAoBW,iBAApB;AACD,GA/BgD;;AAiCjDC,EAAAA,MAAM,CAAEC,CAAF,EAAY;AAChB,WAAOA,CAAC,CAAC3B,iBAAD,EAAoB,KAAK4B,eAAL,CAAqB,MAAM,CACrDD,CAAC,CAAC,KAAD,EAAQ,KAAKE,kBAAL,CAAwB,KAAKC,KAA7B,EAAoC;AAC3CC,MAAAA,WAAW,EAAE,2BAD8B;AAE3CC,MAAAA,UAAU,EAAE,CAAC;AACXvB,QAAAA,IAAI,EAAE,MADK;AAEXwB,QAAAA,KAAK,EAAE,KAAKtB;AAFD,OAAD;AAF+B,KAApC,CAAR,EAMG,CACFgB,CAAC,CAAC,KAAD,EAAQ;AAAEO,MAAAA,KAAK,EAAE;AAAT,KAAR,EAAsD7B,OAAO,CAAC,IAAD,CAA7D,CADC,CANH,CADoD,CAA3B,CAApB,CAAR;AAWD;;AA7CgD,CAApC,CAAf","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\n// Components\nimport VExpansionPanel from './VExpansionPanel'\nimport { VExpandTransition } from '../transitions'\n\n// Mixins\nimport Bootable from '../../mixins/bootable'\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Bootable,\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-content',\n\n  data: () => ({\n    isActive: false,\n  }),\n\n  computed: {\n    parentIsActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n  },\n\n  watch: {\n    parentIsActive: {\n      immediate: true,\n      handler (val, oldVal) {\n        if (val) this.isBooted = true\n\n        if (oldVal == null) this.isActive = val\n        else this.$nextTick(() => this.isActive = val)\n      },\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerContent(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterContent()\n  },\n\n  render (h): VNode {\n    return h(VExpandTransition, this.showLazyContent(() => [\n      h('div', this.setBackgroundColor(this.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      }), [\n        h('div', { class: 'v-expansion-panel-content__wrap' }, getSlot(this)),\n      ]),\n    ]))\n  },\n})\n"],"file":"VExpansionPanelContent.mjs"}