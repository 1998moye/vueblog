{"version":3,"sources":["../../../src/components/VCheckbox/VCheckbox.ts"],"names":["VIcon","VInput","Selectable","extend","name","props","indeterminate","Boolean","indeterminateIcon","type","String","default","offIcon","onIcon","data","inputIndeterminate","computed","classes","options","call","computedIcon","isActive","validationState","isDisabled","undefined","hasError","shouldValidate","hasSuccess","hasColor","computedColor","watch","val","$nextTick","$emit","methods","genCheckbox","title","checkboxAttrs","attrs$","$createElement","staticClass","setTextColor","dense","dark","light","genInput","toString","genRipple","rippleState","genDefaultSlot","genLabel"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\n// Styles\nimport './VCheckbox.sass'\nimport '../../styles/components/_selection-controls.sass'\n\n// Components\nimport VIcon from '../VIcon'\nimport VInput from '../VInput'\n\n// Mixins\nimport Selectable from '../../mixins/selectable'\n\n/* @vue/component */\nexport default Selectable.extend({\n  name: 'v-checkbox',\n\n  props: {\n    indeterminate: Boolean,\n    indeterminateIcon: {\n      type: String,\n      default: '$checkboxIndeterminate',\n    },\n    offIcon: {\n      type: String,\n      default: '$checkboxOff',\n    },\n    onIcon: {\n      type: String,\n      default: '$checkboxOn',\n    },\n  },\n\n  data () {\n    return {\n      inputIndeterminate: this.indeterminate,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls': true,\n        'v-input--checkbox': true,\n        'v-input--indeterminate': this.inputIndeterminate,\n      }\n    },\n    computedIcon (): string {\n      if (this.inputIndeterminate) {\n        return this.indeterminateIcon\n      } else if (this.isActive) {\n        return this.onIcon\n      } else {\n        return this.offIcon\n      }\n    },\n    // Do not return undefined if disabled,\n    // according to spec, should still show\n    // a color when disabled and active\n    validationState (): string | undefined {\n      if (this.isDisabled && !this.inputIndeterminate) return undefined\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor !== null) return this.computedColor\n      return undefined\n    },\n  },\n\n  watch: {\n    indeterminate (val) {\n      // https://github.com/vuetifyjs/vuetify/issues/8270\n      this.$nextTick(() => (this.inputIndeterminate = val))\n    },\n    inputIndeterminate (val) {\n      this.$emit('update:indeterminate', val)\n    },\n    isActive () {\n      if (!this.indeterminate) return\n      this.inputIndeterminate = false\n    },\n  },\n\n  methods: {\n    genCheckbox () {\n      const { title, ...checkboxAttrs } = this.attrs$\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input',\n      }, [\n        this.$createElement(VIcon, this.setTextColor(this.validationState, {\n          props: {\n            dense: this.dense,\n            dark: this.dark,\n            light: this.light,\n          },\n        }), this.computedIcon),\n        this.genInput('checkbox', {\n          ...checkboxAttrs,\n          'aria-checked': this.inputIndeterminate\n            ? 'mixed'\n            : this.isActive.toString(),\n        }),\n        this.genRipple(this.setTextColor(this.rippleState)),\n      ])\n    },\n    genDefaultSlot () {\n      return [\n        this.genCheckbox(),\n        this.genLabel(),\n      ]\n    },\n  },\n})\n"],"file":"VCheckbox.mjs"}