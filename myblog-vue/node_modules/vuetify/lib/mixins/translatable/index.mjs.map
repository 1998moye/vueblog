{"version":3,"sources":["../../../src/mixins/translatable/index.ts"],"names":["Vue","extend","name","props","height","Number","data","elOffsetTop","parallax","parallaxDist","percentScrolled","scrollTop","windowHeight","windowBottom","computed","imgHeight","objHeight","beforeDestroy","window","removeEventListener","translate","methods","calcDimensions","offset","$el","getBoundingClientRect","pageYOffset","top","innerHeight","listeners","addEventListener","Error","parseInt","Math","round"],"mappings":"AAAA;;AACA;AAEA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,eAAeA,GAAG,CAACC,MAAJ,CAAW;AACxBC,EAAAA,IAAI,EAAE,cADkB;AAGxBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEC;AADH,GAHiB;AAOxBC,EAAAA,IAAI,EAAE,OAAO;AACXC,IAAAA,WAAW,EAAE,CADF;AAEXC,IAAAA,QAAQ,EAAE,CAFC;AAGXC,IAAAA,YAAY,EAAE,CAHH;AAIXC,IAAAA,eAAe,EAAE,CAJN;AAKXC,IAAAA,SAAS,EAAE,CALA;AAMXC,IAAAA,YAAY,EAAE,CANH;AAOXC,IAAAA,YAAY,EAAE;AAPH,GAAP,CAPkB;AAiBxBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,GAAY;AACnB,aAAO,KAAKC,SAAL,EAAP;AACD;;AAHO,GAjBc;;AAuBxBC,EAAAA,aAAa,GAAI;AACfC,IAAAA,MAAM,CAACC,mBAAP,CAA2B,QAA3B,EAAqC,KAAKC,SAA1C,EAAqD,KAArD;AACAF,IAAAA,MAAM,CAACC,mBAAP,CAA2B,QAA3B,EAAqC,KAAKC,SAA1C,EAAqD,KAArD;AACD,GA1BuB;;AA4BxBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,cAAc,GAAI;AAChB,YAAMC,MAAM,GAAG,KAAKC,GAAL,CAASC,qBAAT,EAAf;AAEA,WAAKd,SAAL,GAAiBO,MAAM,CAACQ,WAAxB;AACA,WAAKjB,YAAL,GAAoB,KAAKM,SAAL,GAAiB,KAAKX,MAA1C;AACA,WAAKG,WAAL,GAAmBgB,MAAM,CAACI,GAAP,GAAa,KAAKhB,SAArC;AACA,WAAKC,YAAL,GAAoBM,MAAM,CAACU,WAA3B;AACA,WAAKf,YAAL,GAAoB,KAAKF,SAAL,GAAiB,KAAKC,YAA1C;AACD,KATM;;AAUPiB,IAAAA,SAAS,GAAI;AACXX,MAAAA,MAAM,CAACY,gBAAP,CAAwB,QAAxB,EAAkC,KAAKV,SAAvC,EAAkD,KAAlD;AACAF,MAAAA,MAAM,CAACY,gBAAP,CAAwB,QAAxB,EAAkC,KAAKV,SAAvC,EAAkD,KAAlD;AACD,KAbM;;AAcP;AACAJ,IAAAA,SAAS,GAAY;AACnB,YAAM,IAAIe,KAAJ,CAAU,mBAAV,CAAN;AACD,KAjBM;;AAkBPX,IAAAA,SAAS,GAAI;AACX,WAAKE,cAAL;AAEA,WAAKZ,eAAL,GACE,CAAC,KAAKG,YAAL,GAAoB,KAAKN,WAA1B,KACCyB,QAAQ,CAAC,KAAK5B,MAAN,CAAR,GAAwB,KAAKQ,YAD9B,CADF;AAKA,WAAKJ,QAAL,GAAgByB,IAAI,CAACC,KAAL,CAAW,KAAKzB,YAAL,GAAoB,KAAKC,eAApC,CAAhB;AACD;;AA3BM;AA5Be,CAAX,CAAf","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\nimport Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'translatable',\n\n  props: {\n    height: Number,\n  },\n\n  data: () => ({\n    elOffsetTop: 0,\n    parallax: 0,\n    parallaxDist: 0,\n    percentScrolled: 0,\n    scrollTop: 0,\n    windowHeight: 0,\n    windowBottom: 0,\n  }),\n\n  computed: {\n    imgHeight (): number {\n      return this.objHeight()\n    },\n  },\n\n  beforeDestroy () {\n    window.removeEventListener('scroll', this.translate, false)\n    window.removeEventListener('resize', this.translate, false)\n  },\n\n  methods: {\n    calcDimensions () {\n      const offset = this.$el.getBoundingClientRect()\n\n      this.scrollTop = window.pageYOffset\n      this.parallaxDist = this.imgHeight - this.height\n      this.elOffsetTop = offset.top + this.scrollTop\n      this.windowHeight = window.innerHeight\n      this.windowBottom = this.scrollTop + this.windowHeight\n    },\n    listeners () {\n      window.addEventListener('scroll', this.translate, false)\n      window.addEventListener('resize', this.translate, false)\n    },\n    /** @abstract **/\n    objHeight (): number {\n      throw new Error('Not implemented !')\n    },\n    translate () {\n      this.calcDimensions()\n\n      this.percentScrolled = (\n        (this.windowBottom - this.elOffsetTop) /\n        (parseInt(this.height) + this.windowHeight)\n      )\n\n      this.parallax = Math.round(this.parallaxDist * this.percentScrolled)\n    },\n  },\n})\n"],"file":"index.mjs"}