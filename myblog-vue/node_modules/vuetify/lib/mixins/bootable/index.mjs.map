{"version":3,"sources":["../../../src/mixins/bootable/index.ts"],"names":["removed","Vue","extend","name","props","eager","Boolean","data","isBooted","computed","hasContent","isActive","watch","created","$attrs","methods","showLazyContent","content","$createElement"],"mappings":"AAAA;;AACA;AAEA;SACSA,O,kCAET;;AACA,OAAOC,GAAP,MAA2B,KAA3B;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,eAAeA,GAAG,CAACC,MAAJ,GAA+BA,MAA/B,CAAsC;AACnDC,EAAAA,IAAI,EAAE,UAD6C;AAGnDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAEC;AADF,GAH4C;AAOnDC,EAAAA,IAAI,EAAE,OAAO;AACXC,IAAAA,QAAQ,EAAE;AADC,GAAP,CAP6C;AAWnDC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,GAAyB;AACjC,aAAO,KAAKF,QAAL,IAAiB,KAAKH,KAAtB,IAA+B,KAAKM,QAA3C;AACD;;AAHO,GAXyC;AAiBnDC,EAAAA,KAAK,EAAE;AACLD,IAAAA,QAAQ,GAAI;AACV,WAAKH,QAAL,GAAgB,IAAhB;AACD;;AAHI,GAjB4C;;AAuBnDK,EAAAA,OAAO,GAAI;AACT;AACA,QAAI,UAAU,KAAKC,MAAnB,EAA2B;AACzBd,MAAAA,OAAO,CAAC,MAAD,EAAS,IAAT,CAAP;AACD;AACF,GA5BkD;;AA8BnDe,EAAAA,OAAO,EAAE;AACPC,IAAAA,eAAe,CAAEC,OAAF,EAAoC;AACjD,aAAQ,KAAKP,UAAL,IAAmBO,OAApB,GAA+BA,OAAO,EAAtC,GAA2C,CAAC,KAAKC,cAAL,EAAD,CAAlD;AACD;;AAHM;AA9B0C,CAAtC,CAAf","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\n// Utilities\nimport { removed } from '../../util/console'\n\n// Types\nimport Vue, { VNode } from 'vue'\ninterface Toggleable extends Vue {\n  isActive?: boolean\n}\n\n/**\n * Bootable\n * @mixin\n *\n * Used to add lazy content functionality to components\n * Looks for change in \"isActive\" to automatically boot\n * Otherwise can be set manually\n */\n/* @vue/component */\nexport default Vue.extend<Vue & Toggleable>().extend({\n  name: 'bootable',\n\n  props: {\n    eager: Boolean,\n  },\n\n  data: () => ({\n    isBooted: false,\n  }),\n\n  computed: {\n    hasContent (): boolean | undefined {\n      return this.isBooted || this.eager || this.isActive\n    },\n  },\n\n  watch: {\n    isActive () {\n      this.isBooted = true\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if ('lazy' in this.$attrs) {\n      removed('lazy', this)\n    }\n  },\n\n  methods: {\n    showLazyContent (content?: () => VNode[]): VNode[] {\n      return (this.hasContent && content) ? content() : [this.$createElement()]\n    },\n  },\n})\n"],"file":"index.mjs"}