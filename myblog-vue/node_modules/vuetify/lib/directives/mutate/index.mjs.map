{"version":3,"sources":["../../../src/directives/mutate/index.ts"],"names":["inserted","el","binding","modifiers","value","callback","handler","once","modifierKeys","hasModifiers","Object","keys","length","options","attributes","attr","childList","child","subtree","sub","characterData","char","observer","MutationObserver","mutationsList","_mutate","unbind","observe","disconnect","Mutate"],"mappings":"AAAA;;AACA;AAoBA,SAASA,QAAT,CAAmBC,EAAnB,EAAoCC,OAApC,EAAmE;AACjE,QAAMC,SAAS,GAAGD,OAAO,CAACC,SAAR,IAAqB,EAAvC;AACA,QAAMC,KAAK,GAAGF,OAAO,CAACE,KAAtB;AACA,QAAMC,QAAQ,GAAG,OAAOD,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACE,OAAlC,GAA4CF,KAA7D;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQ,OAAGC;AAAX,MAA4BL,SAAlC;AACA,QAAMM,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYH,YAAZ,EAA0BI,MAA1B,GAAmC,CAAxD,CALiE,CAOjE;;AACA,QAAMC,OAAO,GAAG,OAAOT,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACS,OAAnC,GACZT,KAAK,CAACS,OADM,GAEZJ,YAAY,CACZ;AADY,IAEV;AACAK,IAAAA,UAAU,EAAEN,YAAY,CAACO,IADzB;AAEAC,IAAAA,SAAS,EAAER,YAAY,CAACS,KAFxB;AAGAC,IAAAA,OAAO,EAAEV,YAAY,CAACW,GAHtB;AAIAC,IAAAA,aAAa,EAAEZ,YAAY,CAACa;AAJ5B,GAFU,CAQZ;AARY,IASV;AACAP,IAAAA,UAAU,EAAE,IADZ;AAEAE,IAAAA,SAAS,EAAE,IAFX;AAGAE,IAAAA,OAAO,EAAE,IAHT;AAIAE,IAAAA,aAAa,EAAE;AAJf,GAXN;AAkBA,QAAME,QAAQ,GAAG,IAAIC,gBAAJ,CAAqB,CACpCC,aADoC,EAEpCF,QAFoC,KAGjC;AACH;AACA,QAAI,CAACrB,EAAE,CAACwB,OAAR,EAAiB,OAFd,CAEqB;;AAExBpB,IAAAA,QAAQ,CAACmB,aAAD,EAAgBF,QAAhB,CAAR,CAJG,CAMH;;AACAf,IAAAA,IAAI,IAAImB,MAAM,CAACzB,EAAD,CAAd;AACD,GAXgB,CAAjB;AAaAqB,EAAAA,QAAQ,CAACK,OAAT,CAAiB1B,EAAjB,EAAqBY,OAArB;AACAZ,EAAAA,EAAE,CAACwB,OAAH,GAAa;AAAEH,IAAAA;AAAF,GAAb;AACD;;AAED,SAASI,MAAT,CAAiBzB,EAAjB,EAAkC;AAChC;AACA,MAAI,CAACA,EAAE,CAACwB,OAAR,EAAiB;;AAEjBxB,EAAAA,EAAE,CAACwB,OAAH,CAAWH,QAAX,CAAoBM,UAApB;;AACA,SAAO3B,EAAE,CAACwB,OAAV;AACD;;AAED,OAAO,MAAMI,MAAM,GAAG;AACpB7B,EAAAA,QADoB;AAEpB0B,EAAAA;AAFoB,CAAf;AAKP,eAAeG,MAAf","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\nimport { VNodeDirective } from 'vue'\n\ntype MutateHandler = (\n  mutationsList: MutationRecord[],\n  observer: MutationObserver,\n) => void\n\ninterface MutateVNodeDirective extends Omit<VNodeDirective, 'modifiers'> {\n  value?: MutateHandler | { handler: MutateHandler, options?: MutationObserverInit }\n  modifiers?: {\n    once?: boolean\n    attr?: boolean\n    child?: boolean\n    sub?: boolean\n    char?: boolean\n  }\n}\n\nfunction inserted (el: HTMLElement, binding: MutateVNodeDirective) {\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const callback = typeof value === 'object' ? value.handler : value!\n  const { once, ...modifierKeys } = modifiers\n  const hasModifiers = Object.keys(modifierKeys).length > 0\n\n  // Options take top priority\n  const options = typeof value === 'object' && value.options\n    ? value.options\n    : hasModifiers\n      // If we have modifiers, use only those provided\n      ? {\n        attributes: modifierKeys.attr,\n        childList: modifierKeys.child,\n        subtree: modifierKeys.sub,\n        characterData: modifierKeys.char,\n      }\n      // Defaults to everything on\n      : {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        characterData: true,\n      }\n\n  const observer = new MutationObserver((\n    mutationsList: MutationRecord[],\n    observer: MutationObserver\n  ) => {\n    /* istanbul ignore if */\n    if (!el._mutate) return // Just in case, should never fire\n\n    callback(mutationsList, observer)\n\n    // If has the once modifier, unbind\n    once && unbind(el)\n  })\n\n  observer.observe(el, options)\n  el._mutate = { observer }\n}\n\nfunction unbind (el: HTMLElement) {\n  /* istanbul ignore if */\n  if (!el._mutate) return\n\n  el._mutate.observer.disconnect()\n  delete el._mutate\n}\n\nexport const Mutate = {\n  inserted,\n  unbind,\n}\n\nexport default Mutate\n"],"file":"index.mjs"}