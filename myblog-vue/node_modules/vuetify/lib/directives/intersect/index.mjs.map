{"version":3,"sources":["../../../src/directives/intersect/index.ts"],"names":["SUPPORTS_INTERSECTION","mounted","el","binding","modifiers","value","handler","options","observer","IntersectionObserver","entries","_observe","isIntersecting","some","entry","quiet","init","once","unmounted","observe","unobserve","Intersect"],"mappings":"AAAA;SACSA,qB,gCAET;;AAoBA,SAASC,OAAT,CAAkBC,EAAlB,EAAmCC,OAAnC,EAAqE;AACnE,MAAI,CAACH,qBAAL,EAA4B;AAE5B,QAAMI,SAAS,GAAGD,OAAO,CAACC,SAAR,IAAqB,EAAvC;AACA,QAAMC,KAAK,GAAGF,OAAO,CAACE,KAAtB;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuB,OAAOF,KAAP,KAAiB,QAAjB,GACzBA,KADyB,GAEzB;AAAEC,IAAAA,OAAO,EAAED,KAAX;AAAkBE,IAAAA,OAAO,EAAE;AAA3B,GAFJ;AAIA,QAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,CACxCC,OAAoC,GAAG,EADC,EAExCF,QAFwC,KAGrC;AACH;AACA,QAAI,CAACN,EAAE,CAACS,QAAR,EAAkB,OAFf,CAEsB;;AAEzB,UAAMC,cAAc,GAAGF,OAAO,CAACG,IAAR,CAAaC,KAAK,IAAIA,KAAK,CAACF,cAA5B,CAAvB,CAJG,CAMH;AACA;;AACA,QACEN,OAAO,KACL,CAACF,SAAS,CAACW,KAAX,IACAb,EAAE,CAACS,QAAH,CAAYK,IAFP,CAAP,KAIE,CAACZ,SAAS,CAACa,IAAX,IACAL,cADA,IAEA,CAACV,EAAE,CAACS,QAAH,CAAYK,IANf,CADF,EASE;AACAV,MAAAA,OAAO,CAACM,cAAD,EAAiBF,OAAjB,EAA0BF,QAA1B,CAAP;AACD;;AAED,QAAII,cAAc,IAAIR,SAAS,CAACa,IAAhC,EAAsCC,SAAS,CAAChB,EAAD,CAAT,CAAtC,KACKA,EAAE,CAACS,QAAH,CAAYK,IAAZ,GAAmB,IAAnB;AACN,GA1BgB,EA0BdT,OA1Bc,CAAjB;AA4BAL,EAAAA,EAAE,CAACS,QAAH,GAAc;AAAEK,IAAAA,IAAI,EAAE,KAAR;AAAeR,IAAAA;AAAf,GAAd;AAEAA,EAAAA,QAAQ,CAACW,OAAT,CAAiBjB,EAAjB;AACD;;AAED,SAASgB,SAAT,CAAoBhB,EAApB,EAAqC;AACnC;AACA,MAAI,CAACA,EAAE,CAACS,QAAR,EAAkB;;AAElBT,EAAAA,EAAE,CAACS,QAAH,CAAYH,QAAZ,CAAqBY,SAArB,CAA+BlB,EAA/B;;AACA,SAAOA,EAAE,CAACS,QAAV;AACD;;AAED,OAAO,MAAMU,SAAuC,GAAG;AACrDpB,EAAAA,OADqD;AAErDiB,EAAAA;AAFqD,CAAhD;AAKP,eAAeG,SAAf","sourcesContent":["// Utils\nimport { SUPPORTS_INTERSECTION } from '@/util'\n\n// Types\nimport type {\n  DirectiveBinding,\n  ObjectDirective,\n} from 'vue'\n\ntype ObserveHandler = (\n  isIntersecting: boolean,\n  entries: IntersectionObserverEntry[],\n  observer: IntersectionObserver,\n) => void\n\nexport interface ObserveDirectiveBinding extends Omit<DirectiveBinding, 'modifiers' | 'value'> {\n  value?: ObserveHandler | { handler: ObserveHandler, options?: IntersectionObserverInit }\n  modifiers: {\n    once?: boolean\n    quiet?: boolean\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: ObserveDirectiveBinding) {\n  if (!SUPPORTS_INTERSECTION) return\n\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const { handler, options } = typeof value === 'object'\n    ? value\n    : { handler: value, options: {} }\n\n  const observer = new IntersectionObserver((\n    entries: IntersectionObserverEntry[] = [],\n    observer: IntersectionObserver\n  ) => {\n    /* istanbul ignore if */\n    if (!el._observe) return // Just in case, should never fire\n\n    const isIntersecting = entries.some(entry => entry.isIntersecting)\n\n    // If is not quiet or has already been\n    // initted, invoke the user callback\n    if (\n      handler && (\n        !modifiers.quiet ||\n        el._observe.init\n      ) && (\n        !modifiers.once ||\n        isIntersecting ||\n        !el._observe.init\n      )\n    ) {\n      handler(isIntersecting, entries, observer)\n    }\n\n    if (isIntersecting && modifiers.once) unmounted(el)\n    else el._observe.init = true\n  }, options)\n\n  el._observe = { init: false, observer }\n\n  observer.observe(el)\n}\n\nfunction unmounted (el: HTMLElement) {\n  /* istanbul ignore if */\n  if (!el._observe) return\n\n  el._observe.observer.unobserve(el)\n  delete el._observe\n}\n\nexport const Intersect: ObjectDirective<HTMLElement> = {\n  mounted,\n  unmounted,\n}\n\nexport default Intersect\n"],"file":"index.mjs"}