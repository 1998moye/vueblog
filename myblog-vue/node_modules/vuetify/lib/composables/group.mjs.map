{"version":3,"sources":["../../src/composables/group.ts"],"names":["computed","inject","onBeforeUnmount","onMounted","provide","reactive","toRef","useProxiedModel","consoleWarn","deepEqual","getUid","propsFactory","wrapInArray","makeGroupProps","modelValue","type","Number","Boolean","String","Array","Object","default","undefined","multiple","mandatory","max","selectedClass","makeGroupItemProps","value","index","disabled","useGroupItem","props","injectKey","group","Error","description","id","register","unregister","isSelected","toggle","select","useGroup","isUnmounted","items","selected","v","getIds","arr","getValues","item","unwrapped","splice","push","filter","forceMandatoryValue","findIndex","find","length","internalValue","slice","includes","step","offset","currentId","currentIndex","i","newIndex","newItem","state","prev","next","ids","values"],"mappings":"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","sourcesContent":["// Utilities\nimport { computed, inject, onBeforeUnmount, onMounted, provide, reactive, toRef } from 'vue'\nimport { useProxiedModel } from './proxiedModel'\nimport { consoleWarn, deepEqual, getUid, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType, Ref, UnwrapRef } from 'vue'\n\ninterface GroupItem {\n  id: number\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n}\n\ninterface GroupProps {\n  modelValue?: unknown\n  multiple?: boolean\n  mandatory?: boolean | 'force'\n  max?: number\n  selectedClass?: string\n}\n\ninterface GroupProvide {\n  register: (item: GroupItem, index?: number) => void\n  unregister: (id: number) => void\n  select: (id: number, value: boolean) => void\n  selected: Ref<any[]>\n  isSelected: (id: number) => boolean\n  prev: () => void\n  next: () => void\n  selectedClass: Ref<string | undefined>\n}\n\nexport const makeGroupProps = propsFactory({\n  modelValue: {\n    type: [Number, Boolean, String, Array, Object],\n    default: undefined,\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String] as PropType<boolean | 'force'>,\n  max: Number,\n  selectedClass: String,\n}, 'group')\n\nexport const makeGroupItemProps = propsFactory({\n  value: {\n    type: [Number, Boolean, String, Object],\n    default: undefined,\n  },\n  index: Number,\n  disabled: Boolean,\n  selectedClass: String,\n}, 'group-item')\n\n// Composables\nexport function useGroupItem (\n  props: { value?: unknown, index?: number, disabled?: boolean, selectedClass?: string },\n  injectKey: InjectionKey<GroupProvide>,\n) {\n  const group = inject(injectKey, null)\n\n  if (!group) {\n    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`)\n  }\n\n  const id = getUid()\n  const value = toRef(props, 'value')\n  const disabled = toRef(props, 'disabled')\n\n  group.register({\n    id,\n    value,\n    disabled,\n  }, props.index)\n\n  onBeforeUnmount(() => {\n    group.unregister(id)\n  })\n\n  const isSelected = computed(() => {\n    return group.isSelected(id)\n  })\n\n  const selectedClass = computed(() => isSelected.value && (group.selectedClass.value ?? props.selectedClass))\n\n  return {\n    isSelected,\n    toggle: () => group.select(id, !isSelected.value),\n    select: (value: boolean) => group.select(id, value),\n    selectedClass,\n    value,\n    disabled,\n  }\n}\n\nexport function useGroup (\n  props: GroupProps,\n  injectKey: InjectionKey<GroupProvide>\n) {\n  let isUnmounted = false\n  const items = reactive<GroupItem[]>([])\n  const selected = useProxiedModel(\n    props,\n    'modelValue',\n    [],\n    v => {\n      if (v == null) return []\n\n      return getIds(items, wrapInArray(v))\n    },\n    v => {\n      const arr = getValues(items, v)\n\n      return props.multiple ? arr : arr[0]\n    }\n  )\n\n  function register (item: GroupItem, index?: number) {\n    // Is there a better way to fix this typing?\n    const unwrapped = item as unknown as UnwrapRef<GroupItem>\n    if (index != null) items.splice(index, 0, unwrapped)\n    else items.push(unwrapped)\n  }\n\n  function unregister (id: number) {\n    if (isUnmounted) return\n\n    selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue()\n\n    const index = items.findIndex(item => item.id === id)\n    items.splice(index, 1)\n  }\n\n  // If mandatory and nothing is selected, then select first non-disabled item\n  function forceMandatoryValue () {\n    const item = items.find(item => !item.disabled)\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id]\n    }\n  }\n\n  onMounted(() => {\n    forceMandatoryValue()\n  })\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  function select (id: number, isSelected: boolean) {\n    const item = items.find(item => item.id === id)\n    if (isSelected && item?.disabled) return\n\n    if (props.multiple) {\n      const internalValue = selected.value.slice()\n      const index = internalValue.findIndex(v => v === id)\n\n      // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n      if (\n        props.mandatory &&\n        index > -1 &&\n        internalValue.length <= 1\n      ) return\n\n      // We can't add value if it would\n      // cause max limit to be exceeded\n      if (\n        props.max != null &&\n        index < 0 &&\n        internalValue.length + 1 > props.max\n      ) return\n\n      if (index < 0 && isSelected) internalValue.push(id)\n      else if (index >= 0 && !isSelected) internalValue.splice(index, 1)\n\n      selected.value = internalValue\n    } else {\n      if (props.mandatory && selected.value.includes(id)) return\n\n      selected.value = isSelected ? [id] : []\n    }\n  }\n\n  function step (offset: number) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop')\n\n    if (!selected.value.length) {\n      const item = items.find(item => !item.disabled)\n      item && (selected.value = [item.id])\n    } else {\n      const currentId = selected.value[0]\n      const currentIndex = items.findIndex(i => i.id === currentId)\n\n      let newIndex = (currentIndex + offset) % items.length\n      let newItem = items[newIndex]\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length\n        newItem = items[newIndex]\n      }\n\n      if (newItem.disabled) return\n\n      selected.value = [items[newIndex].id]\n    }\n  }\n\n  const state = {\n    register,\n    unregister,\n    selected,\n    select,\n    prev: () => step(items.length - 1),\n    next: () => step(1),\n    isSelected: (id: number) => selected.value.includes(id),\n    selectedClass: computed(() => props.selectedClass),\n  }\n\n  provide(injectKey, state)\n\n  return state\n}\n\nfunction getIds (items: UnwrapRef<GroupItem[]>, modelValue: any[]) {\n  const ids = []\n  for (const item of items) {\n    if (item.value != null) {\n      if (modelValue.find(value => deepEqual(value, item.value))) {\n        ids.push(item.id)\n      }\n    } else if (modelValue.includes(item.id)) {\n      ids.push(item.id)\n    }\n  }\n\n  return ids\n}\n\nfunction getValues (items: UnwrapRef<GroupItem[]>, ids: any[]) {\n  const values = []\n\n  for (const item of items) {\n    if (ids.includes(item.id)) {\n      values.push(item.value != null ? item.value : item.id)\n    }\n  }\n\n  return values\n}\n"],"file":"group.mjs"}